
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000237c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000454  20400000  0040237c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000002c4  20400454  004027d0  00020454  2**2
                  ALLOC
  3 .stack        00002000  20400718  00402a94  00020454  2**0
                  ALLOC
  4 .heap         00000200  20402718  00404a94  00020454  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020482  2**0
                  CONTENTS, READONLY
  7 .debug_info   00017e0c  00000000  00000000  000204db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003573  00000000  00000000  000382e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005a7a  00000000  00000000  0003b85a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000940  00000000  00000000  000412d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000970  00000000  00000000  00041c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009f23  00000000  00000000  00042584  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ed4b  00000000  00000000  0004c4a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008fcfa  00000000  00000000  0005b1f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001640  00000000  00000000  000eaeec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 27 40 20 39 10 40 00 35 10 40 00 35 10 40 00     .'@ 9.@.5.@.5.@.
  400010:	35 10 40 00 35 10 40 00 35 10 40 00 00 00 00 00     5.@.5.@.5.@.....
	...
  40002c:	35 10 40 00 35 10 40 00 00 00 00 00 35 10 40 00     5.@.5.@.....5.@.
  40003c:	35 10 40 00 35 10 40 00 35 10 40 00 35 10 40 00     5.@.5.@.5.@.5.@.
  40004c:	8d 14 40 00 35 10 40 00 35 10 40 00 35 10 40 00     ..@.5.@.5.@.5.@.
  40005c:	35 10 40 00 35 10 40 00 00 00 00 00 5d 0e 40 00     5.@.5.@.....].@.
  40006c:	71 0e 40 00 85 0e 40 00 35 10 40 00 35 10 40 00     q.@...@.5.@.5.@.
  40007c:	35 10 40 00 99 0e 40 00 ad 0e 40 00 35 10 40 00     5.@...@...@.5.@.
  40008c:	35 10 40 00 35 10 40 00 35 10 40 00 35 10 40 00     5.@.5.@.5.@.5.@.
  40009c:	35 10 40 00 d5 15 40 00 35 10 40 00 25 16 40 00     5.@...@.5.@.%.@.
  4000ac:	35 10 40 00 35 10 40 00 35 10 40 00 35 10 40 00     5.@.5.@.5.@.5.@.
  4000bc:	35 10 40 00 35 10 40 00 35 10 40 00 35 10 40 00     5.@.5.@.5.@.5.@.
  4000cc:	35 10 40 00 00 00 00 00 35 10 40 00 00 00 00 00     5.@.....5.@.....
  4000dc:	35 10 40 00 35 10 40 00 35 10 40 00 35 10 40 00     5.@.5.@.5.@.5.@.
  4000ec:	35 10 40 00 35 10 40 00 35 10 40 00 35 10 40 00     5.@.5.@.5.@.5.@.
  4000fc:	35 10 40 00 35 10 40 00 fd 15 40 00 35 10 40 00     5.@.5.@...@.5.@.
  40010c:	35 10 40 00 35 10 40 00 00 00 00 00 00 00 00 00     5.@.5.@.........
  40011c:	00 00 00 00 35 10 40 00 35 10 40 00 35 10 40 00     ....5.@.5.@.5.@.
  40012c:	35 10 40 00 35 10 40 00 00 00 00 00 35 10 40 00     5.@.5.@.....5.@.
  40013c:	35 10 40 00                                         5.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400454 	.word	0x20400454
  40015c:	00000000 	.word	0x00000000
  400160:	0040237c 	.word	0x0040237c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040237c 	.word	0x0040237c
  4001a0:	20400458 	.word	0x20400458
  4001a4:	0040237c 	.word	0x0040237c
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4001ac:	4b03      	ldr	r3, [pc, #12]	; (4001bc <rtt_init+0x10>)
  4001ae:	681b      	ldr	r3, [r3, #0]
  4001b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4001b4:	4319      	orrs	r1, r3
  4001b6:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4001b8:	2000      	movs	r0, #0
  4001ba:	4770      	bx	lr
  4001bc:	20400470 	.word	0x20400470

004001c0 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4001c0:	b941      	cbnz	r1, 4001d4 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4001c2:	4a09      	ldr	r2, [pc, #36]	; (4001e8 <rtt_sel_source+0x28>)
  4001c4:	6813      	ldr	r3, [r2, #0]
  4001c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4001ca:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001cc:	6802      	ldr	r2, [r0, #0]
  4001ce:	4313      	orrs	r3, r2
  4001d0:	6003      	str	r3, [r0, #0]
  4001d2:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4001d4:	4a04      	ldr	r2, [pc, #16]	; (4001e8 <rtt_sel_source+0x28>)
  4001d6:	6813      	ldr	r3, [r2, #0]
  4001d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4001dc:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001de:	6802      	ldr	r2, [r0, #0]
  4001e0:	4313      	orrs	r3, r2
  4001e2:	6003      	str	r3, [r0, #0]
  4001e4:	4770      	bx	lr
  4001e6:	bf00      	nop
  4001e8:	20400470 	.word	0x20400470

004001ec <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4001ec:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4001ee:	4b03      	ldr	r3, [pc, #12]	; (4001fc <rtt_enable_interrupt+0x10>)
  4001f0:	681b      	ldr	r3, [r3, #0]
  4001f2:	4319      	orrs	r1, r3
  4001f4:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  4001f6:	6001      	str	r1, [r0, #0]
  4001f8:	4770      	bx	lr
  4001fa:	bf00      	nop
  4001fc:	20400470 	.word	0x20400470

00400200 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400200:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  400202:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400206:	4b02      	ldr	r3, [pc, #8]	; (400210 <rtt_disable_interrupt+0x10>)
  400208:	681b      	ldr	r3, [r3, #0]
  40020a:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  40020c:	6001      	str	r1, [r0, #0]
  40020e:	4770      	bx	lr
  400210:	20400470 	.word	0x20400470

00400214 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400214:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400216:	6883      	ldr	r3, [r0, #8]
  400218:	429a      	cmp	r2, r3
  40021a:	d003      	beq.n	400224 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  40021c:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40021e:	6883      	ldr	r3, [r0, #8]
  400220:	4293      	cmp	r3, r2
  400222:	d1fb      	bne.n	40021c <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400224:	4618      	mov	r0, r3
  400226:	4770      	bx	lr

00400228 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400228:	68c0      	ldr	r0, [r0, #12]
}
  40022a:	4770      	bx	lr

0040022c <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  40022c:	b570      	push	{r4, r5, r6, lr}
  40022e:	4606      	mov	r6, r0
  400230:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  400232:	6804      	ldr	r4, [r0, #0]
  400234:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400238:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40023c:	4809      	ldr	r0, [pc, #36]	; (400264 <rtt_write_alarm_time+0x38>)
  40023e:	4b0a      	ldr	r3, [pc, #40]	; (400268 <rtt_write_alarm_time+0x3c>)
  400240:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400242:	b92d      	cbnz	r5, 400250 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400244:	f04f 33ff 	mov.w	r3, #4294967295
  400248:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  40024a:	b924      	cbnz	r4, 400256 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  40024c:	2000      	movs	r0, #0
  40024e:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400250:	3d01      	subs	r5, #1
  400252:	6075      	str	r5, [r6, #4]
  400254:	e7f9      	b.n	40024a <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400256:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40025a:	4802      	ldr	r0, [pc, #8]	; (400264 <rtt_write_alarm_time+0x38>)
  40025c:	4b03      	ldr	r3, [pc, #12]	; (40026c <rtt_write_alarm_time+0x40>)
  40025e:	4798      	blx	r3
  400260:	e7f4      	b.n	40024c <rtt_write_alarm_time+0x20>
  400262:	bf00      	nop
  400264:	400e1830 	.word	0x400e1830
  400268:	00400201 	.word	0x00400201
  40026c:	004001ed 	.word	0x004001ed

00400270 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400270:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400272:	4b07      	ldr	r3, [pc, #28]	; (400290 <spi_enable_clock+0x20>)
  400274:	4298      	cmp	r0, r3
  400276:	d003      	beq.n	400280 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400278:	4b06      	ldr	r3, [pc, #24]	; (400294 <spi_enable_clock+0x24>)
  40027a:	4298      	cmp	r0, r3
  40027c:	d004      	beq.n	400288 <spi_enable_clock+0x18>
  40027e:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400280:	2015      	movs	r0, #21
  400282:	4b05      	ldr	r3, [pc, #20]	; (400298 <spi_enable_clock+0x28>)
  400284:	4798      	blx	r3
  400286:	bd08      	pop	{r3, pc}
  400288:	202a      	movs	r0, #42	; 0x2a
  40028a:	4b03      	ldr	r3, [pc, #12]	; (400298 <spi_enable_clock+0x28>)
  40028c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40028e:	e7f6      	b.n	40027e <spi_enable_clock+0xe>
  400290:	40008000 	.word	0x40008000
  400294:	40058000 	.word	0x40058000
  400298:	00400fe1 	.word	0x00400fe1

0040029c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40029c:	6843      	ldr	r3, [r0, #4]
  40029e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4002a2:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4002a4:	6843      	ldr	r3, [r0, #4]
  4002a6:	0409      	lsls	r1, r1, #16
  4002a8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4002ac:	4319      	orrs	r1, r3
  4002ae:	6041      	str	r1, [r0, #4]
  4002b0:	4770      	bx	lr

004002b2 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4002b2:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4002b4:	f643 2499 	movw	r4, #15001	; 0x3a99
  4002b8:	6905      	ldr	r5, [r0, #16]
  4002ba:	f015 0f02 	tst.w	r5, #2
  4002be:	d103      	bne.n	4002c8 <spi_write+0x16>
		if (!timeout--) {
  4002c0:	3c01      	subs	r4, #1
  4002c2:	d1f9      	bne.n	4002b8 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4002c4:	2001      	movs	r0, #1
  4002c6:	e00c      	b.n	4002e2 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4002c8:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4002ca:	f014 0f02 	tst.w	r4, #2
  4002ce:	d006      	beq.n	4002de <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4002d0:	0412      	lsls	r2, r2, #16
  4002d2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4002d6:	4311      	orrs	r1, r2
		if (uc_last) {
  4002d8:	b10b      	cbz	r3, 4002de <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4002da:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4002de:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bc30      	pop	{r4, r5}
  4002e4:	4770      	bx	lr

004002e6 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4002e6:	b932      	cbnz	r2, 4002f6 <spi_set_clock_polarity+0x10>
  4002e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4002ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002ee:	f023 0301 	bic.w	r3, r3, #1
  4002f2:	6303      	str	r3, [r0, #48]	; 0x30
  4002f4:	4770      	bx	lr
  4002f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4002fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002fc:	f043 0301 	orr.w	r3, r3, #1
  400300:	6303      	str	r3, [r0, #48]	; 0x30
  400302:	4770      	bx	lr

00400304 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400304:	b932      	cbnz	r2, 400314 <spi_set_clock_phase+0x10>
  400306:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40030a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40030c:	f023 0302 	bic.w	r3, r3, #2
  400310:	6303      	str	r3, [r0, #48]	; 0x30
  400312:	4770      	bx	lr
  400314:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400318:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40031a:	f043 0302 	orr.w	r3, r3, #2
  40031e:	6303      	str	r3, [r0, #48]	; 0x30
  400320:	4770      	bx	lr

00400322 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400322:	2a04      	cmp	r2, #4
  400324:	d003      	beq.n	40032e <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400326:	b16a      	cbz	r2, 400344 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400328:	2a08      	cmp	r2, #8
  40032a:	d016      	beq.n	40035a <spi_configure_cs_behavior+0x38>
  40032c:	4770      	bx	lr
  40032e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400332:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400334:	f023 0308 	bic.w	r3, r3, #8
  400338:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40033a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40033c:	f043 0304 	orr.w	r3, r3, #4
  400340:	6303      	str	r3, [r0, #48]	; 0x30
  400342:	4770      	bx	lr
  400344:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400348:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40034a:	f023 0308 	bic.w	r3, r3, #8
  40034e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400350:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400352:	f023 0304 	bic.w	r3, r3, #4
  400356:	6303      	str	r3, [r0, #48]	; 0x30
  400358:	4770      	bx	lr
  40035a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40035e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400360:	f043 0308 	orr.w	r3, r3, #8
  400364:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400366:	e7e1      	b.n	40032c <spi_configure_cs_behavior+0xa>

00400368 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400368:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40036c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40036e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400372:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400374:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400376:	431a      	orrs	r2, r3
  400378:	630a      	str	r2, [r1, #48]	; 0x30
  40037a:	4770      	bx	lr

0040037c <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40037c:	1e43      	subs	r3, r0, #1
  40037e:	4419      	add	r1, r3
  400380:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400384:	1e43      	subs	r3, r0, #1
  400386:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400388:	bf94      	ite	ls
  40038a:	b200      	sxthls	r0, r0
		return -1;
  40038c:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400390:	4770      	bx	lr

00400392 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  400392:	b17a      	cbz	r2, 4003b4 <spi_set_baudrate_div+0x22>
{
  400394:	b410      	push	{r4}
  400396:	4614      	mov	r4, r2
  400398:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40039c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40039e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4003a2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4003a4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4003a6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4003aa:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4003ac:	2000      	movs	r0, #0
}
  4003ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003b2:	4770      	bx	lr
        return -1;
  4003b4:	f04f 30ff 	mov.w	r0, #4294967295
  4003b8:	4770      	bx	lr

004003ba <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4003ba:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003bc:	0189      	lsls	r1, r1, #6
  4003be:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4003c0:	2402      	movs	r4, #2
  4003c2:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4003c4:	f04f 31ff 	mov.w	r1, #4294967295
  4003c8:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4003ca:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4003cc:	605a      	str	r2, [r3, #4]
}
  4003ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003d2:	4770      	bx	lr

004003d4 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4003d4:	0189      	lsls	r1, r1, #6
  4003d6:	2305      	movs	r3, #5
  4003d8:	5043      	str	r3, [r0, r1]
  4003da:	4770      	bx	lr

004003dc <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4003dc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4003e0:	61ca      	str	r2, [r1, #28]
  4003e2:	4770      	bx	lr

004003e4 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003e4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4003e8:	624a      	str	r2, [r1, #36]	; 0x24
  4003ea:	4770      	bx	lr

004003ec <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003ec:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4003f0:	6a08      	ldr	r0, [r1, #32]
}
  4003f2:	4770      	bx	lr

004003f4 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4003f4:	b4f0      	push	{r4, r5, r6, r7}
  4003f6:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4003f8:	2402      	movs	r4, #2
  4003fa:	9401      	str	r4, [sp, #4]
  4003fc:	2408      	movs	r4, #8
  4003fe:	9402      	str	r4, [sp, #8]
  400400:	2420      	movs	r4, #32
  400402:	9403      	str	r4, [sp, #12]
  400404:	2480      	movs	r4, #128	; 0x80
  400406:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400408:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40040a:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40040c:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40040e:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400412:	d814      	bhi.n	40043e <tc_find_mck_divisor+0x4a>
  400414:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400416:	42a0      	cmp	r0, r4
  400418:	d217      	bcs.n	40044a <tc_find_mck_divisor+0x56>
  40041a:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  40041c:	af01      	add	r7, sp, #4
  40041e:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400422:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400426:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400428:	4284      	cmp	r4, r0
  40042a:	d30a      	bcc.n	400442 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  40042c:	4286      	cmp	r6, r0
  40042e:	d90d      	bls.n	40044c <tc_find_mck_divisor+0x58>
			ul_index++) {
  400430:	3501      	adds	r5, #1
	for (ul_index = 0;
  400432:	2d05      	cmp	r5, #5
  400434:	d1f3      	bne.n	40041e <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400436:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400438:	b006      	add	sp, #24
  40043a:	bcf0      	pop	{r4, r5, r6, r7}
  40043c:	4770      	bx	lr
			return 0;
  40043e:	2000      	movs	r0, #0
  400440:	e7fa      	b.n	400438 <tc_find_mck_divisor+0x44>
  400442:	2000      	movs	r0, #0
  400444:	e7f8      	b.n	400438 <tc_find_mck_divisor+0x44>
	return 1;
  400446:	2001      	movs	r0, #1
  400448:	e7f6      	b.n	400438 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40044a:	2500      	movs	r5, #0
	if (p_uldiv) {
  40044c:	b12a      	cbz	r2, 40045a <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  40044e:	a906      	add	r1, sp, #24
  400450:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400454:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400458:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  40045a:	2b00      	cmp	r3, #0
  40045c:	d0f3      	beq.n	400446 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  40045e:	601d      	str	r5, [r3, #0]
	return 1;
  400460:	2001      	movs	r0, #1
  400462:	e7e9      	b.n	400438 <tc_find_mck_divisor+0x44>

00400464 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400464:	4b01      	ldr	r3, [pc, #4]	; (40046c <gfx_mono_set_framebuffer+0x8>)
  400466:	6018      	str	r0, [r3, #0]
  400468:	4770      	bx	lr
  40046a:	bf00      	nop
  40046c:	20400474 	.word	0x20400474

00400470 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400470:	4b02      	ldr	r3, [pc, #8]	; (40047c <gfx_mono_framebuffer_put_byte+0xc>)
  400472:	681b      	ldr	r3, [r3, #0]
  400474:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  400478:	5442      	strb	r2, [r0, r1]
  40047a:	4770      	bx	lr
  40047c:	20400474 	.word	0x20400474

00400480 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400480:	4b02      	ldr	r3, [pc, #8]	; (40048c <gfx_mono_framebuffer_get_byte+0xc>)
  400482:	681b      	ldr	r3, [r3, #0]
  400484:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  400488:	5c40      	ldrb	r0, [r0, r1]
  40048a:	4770      	bx	lr
  40048c:	20400474 	.word	0x20400474

00400490 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400494:	1884      	adds	r4, r0, r2
  400496:	2c80      	cmp	r4, #128	; 0x80
  400498:	dd02      	ble.n	4004a0 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  40049a:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  40049e:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4004a0:	b322      	cbz	r2, 4004ec <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4004a2:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4004a4:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4004a8:	2601      	movs	r6, #1
  4004aa:	fa06 f101 	lsl.w	r1, r6, r1
  4004ae:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4004b0:	2b01      	cmp	r3, #1
  4004b2:	d01d      	beq.n	4004f0 <gfx_mono_generic_draw_horizontal_line+0x60>
  4004b4:	2b00      	cmp	r3, #0
  4004b6:	d035      	beq.n	400524 <gfx_mono_generic_draw_horizontal_line+0x94>
  4004b8:	2b02      	cmp	r3, #2
  4004ba:	d117      	bne.n	4004ec <gfx_mono_generic_draw_horizontal_line+0x5c>
  4004bc:	3801      	subs	r0, #1
  4004be:	b2c7      	uxtb	r7, r0
  4004c0:	19d4      	adds	r4, r2, r7
  4004c2:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  4004c4:	f8df a090 	ldr.w	sl, [pc, #144]	; 400558 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  4004c8:	f04f 0900 	mov.w	r9, #0
  4004cc:	f8df 808c 	ldr.w	r8, [pc, #140]	; 40055c <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4004d0:	4621      	mov	r1, r4
  4004d2:	4628      	mov	r0, r5
  4004d4:	47d0      	blx	sl
			temp ^= pixelmask;
  4004d6:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4004da:	464b      	mov	r3, r9
  4004dc:	b2d2      	uxtb	r2, r2
  4004de:	4621      	mov	r1, r4
  4004e0:	4628      	mov	r0, r5
  4004e2:	47c0      	blx	r8
  4004e4:	3c01      	subs	r4, #1
  4004e6:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4004e8:	42bc      	cmp	r4, r7
  4004ea:	d1f1      	bne.n	4004d0 <gfx_mono_generic_draw_horizontal_line+0x40>
  4004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4004f0:	3801      	subs	r0, #1
  4004f2:	b2c7      	uxtb	r7, r0
  4004f4:	19d4      	adds	r4, r2, r7
  4004f6:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4004f8:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400558 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  4004fc:	f04f 0900 	mov.w	r9, #0
  400500:	f8df 8058 	ldr.w	r8, [pc, #88]	; 40055c <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400504:	4621      	mov	r1, r4
  400506:	4628      	mov	r0, r5
  400508:	47d0      	blx	sl
			temp |= pixelmask;
  40050a:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40050e:	464b      	mov	r3, r9
  400510:	b2d2      	uxtb	r2, r2
  400512:	4621      	mov	r1, r4
  400514:	4628      	mov	r0, r5
  400516:	47c0      	blx	r8
  400518:	3c01      	subs	r4, #1
  40051a:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40051c:	42bc      	cmp	r4, r7
  40051e:	d1f1      	bne.n	400504 <gfx_mono_generic_draw_horizontal_line+0x74>
  400520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400524:	3801      	subs	r0, #1
  400526:	b2c7      	uxtb	r7, r0
  400528:	19d4      	adds	r4, r2, r7
  40052a:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  40052c:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400558 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  400530:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  400532:	f8df 9028 	ldr.w	r9, [pc, #40]	; 40055c <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400536:	4621      	mov	r1, r4
  400538:	4628      	mov	r0, r5
  40053a:	47c0      	blx	r8
			temp &= ~pixelmask;
  40053c:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400540:	2300      	movs	r3, #0
  400542:	b2d2      	uxtb	r2, r2
  400544:	4621      	mov	r1, r4
  400546:	4628      	mov	r0, r5
  400548:	47c8      	blx	r9
  40054a:	3c01      	subs	r4, #1
  40054c:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40054e:	42bc      	cmp	r4, r7
  400550:	d1f1      	bne.n	400536 <gfx_mono_generic_draw_horizontal_line+0xa6>
  400552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400556:	bf00      	nop
  400558:	00400791 	.word	0x00400791
  40055c:	0040068d 	.word	0x0040068d

00400560 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400564:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400568:	b18b      	cbz	r3, 40058e <gfx_mono_generic_draw_filled_rect+0x2e>
  40056a:	461c      	mov	r4, r3
  40056c:	4690      	mov	r8, r2
  40056e:	4606      	mov	r6, r0
  400570:	1e4d      	subs	r5, r1, #1
  400572:	b2ed      	uxtb	r5, r5
  400574:	442c      	add	r4, r5
  400576:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400578:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400594 <gfx_mono_generic_draw_filled_rect+0x34>
  40057c:	463b      	mov	r3, r7
  40057e:	4642      	mov	r2, r8
  400580:	4621      	mov	r1, r4
  400582:	4630      	mov	r0, r6
  400584:	47c8      	blx	r9
  400586:	3c01      	subs	r4, #1
  400588:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  40058a:	42ac      	cmp	r4, r5
  40058c:	d1f6      	bne.n	40057c <gfx_mono_generic_draw_filled_rect+0x1c>
  40058e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400592:	bf00      	nop
  400594:	00400491 	.word	0x00400491

00400598 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40059c:	b083      	sub	sp, #12
  40059e:	4604      	mov	r4, r0
  4005a0:	4688      	mov	r8, r1
  4005a2:	4691      	mov	r9, r2
  4005a4:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4005a6:	7a5b      	ldrb	r3, [r3, #9]
  4005a8:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4005ac:	2100      	movs	r1, #0
  4005ae:	9100      	str	r1, [sp, #0]
  4005b0:	4649      	mov	r1, r9
  4005b2:	4640      	mov	r0, r8
  4005b4:	4d21      	ldr	r5, [pc, #132]	; (40063c <gfx_mono_draw_char+0xa4>)
  4005b6:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  4005b8:	f89b 3000 	ldrb.w	r3, [fp]
  4005bc:	b113      	cbz	r3, 4005c4 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  4005be:	b003      	add	sp, #12
  4005c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  4005c4:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4005c8:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  4005ca:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  4005ce:	bf18      	it	ne
  4005d0:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  4005d2:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  4005d6:	f89b 700a 	ldrb.w	r7, [fp, #10]
  4005da:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  4005dc:	fb17 f70a 	smulbb	r7, r7, sl
  4005e0:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  4005e4:	f8db 3004 	ldr.w	r3, [fp, #4]
  4005e8:	fa13 f787 	uxtah	r7, r3, r7
  4005ec:	e01f      	b.n	40062e <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  4005ee:	0064      	lsls	r4, r4, #1
  4005f0:	b2e4      	uxtb	r4, r4
  4005f2:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  4005f4:	b2eb      	uxtb	r3, r5
  4005f6:	429e      	cmp	r6, r3
  4005f8:	d910      	bls.n	40061c <gfx_mono_draw_char+0x84>
  4005fa:	b2eb      	uxtb	r3, r5
  4005fc:	eb08 0003 	add.w	r0, r8, r3
  400600:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400602:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400606:	bf08      	it	eq
  400608:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  40060c:	f014 0f80 	tst.w	r4, #128	; 0x80
  400610:	d0ed      	beq.n	4005ee <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400612:	2201      	movs	r2, #1
  400614:	4649      	mov	r1, r9
  400616:	4b0a      	ldr	r3, [pc, #40]	; (400640 <gfx_mono_draw_char+0xa8>)
  400618:	4798      	blx	r3
  40061a:	e7e8      	b.n	4005ee <gfx_mono_draw_char+0x56>
		inc_y += 1;
  40061c:	f109 0901 	add.w	r9, r9, #1
  400620:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400624:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400628:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  40062c:	d0c7      	beq.n	4005be <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  40062e:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400632:	2e00      	cmp	r6, #0
  400634:	d0f2      	beq.n	40061c <gfx_mono_draw_char+0x84>
  400636:	2500      	movs	r5, #0
  400638:	462c      	mov	r4, r5
  40063a:	e7de      	b.n	4005fa <gfx_mono_draw_char+0x62>
  40063c:	00400561 	.word	0x00400561
  400640:	0040072d 	.word	0x0040072d

00400644 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400648:	4604      	mov	r4, r0
  40064a:	4690      	mov	r8, r2
  40064c:	461d      	mov	r5, r3
  40064e:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400650:	4f0d      	ldr	r7, [pc, #52]	; (400688 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400652:	460e      	mov	r6, r1
  400654:	e008      	b.n	400668 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400656:	7a6a      	ldrb	r2, [r5, #9]
  400658:	3201      	adds	r2, #1
  40065a:	4442      	add	r2, r8
  40065c:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400660:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  400662:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400666:	b16b      	cbz	r3, 400684 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400668:	7820      	ldrb	r0, [r4, #0]
  40066a:	280a      	cmp	r0, #10
  40066c:	d0f3      	beq.n	400656 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  40066e:	280d      	cmp	r0, #13
  400670:	d0f7      	beq.n	400662 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400672:	462b      	mov	r3, r5
  400674:	4642      	mov	r2, r8
  400676:	4649      	mov	r1, r9
  400678:	47b8      	blx	r7
			x += font->width;
  40067a:	7a2b      	ldrb	r3, [r5, #8]
  40067c:	4499      	add	r9, r3
  40067e:	fa5f f989 	uxtb.w	r9, r9
  400682:	e7ee      	b.n	400662 <gfx_mono_draw_string+0x1e>
}
  400684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400688:	00400599 	.word	0x00400599

0040068c <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  40068c:	b570      	push	{r4, r5, r6, lr}
  40068e:	4604      	mov	r4, r0
  400690:	460d      	mov	r5, r1
  400692:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400694:	b91b      	cbnz	r3, 40069e <gfx_mono_ssd1306_put_byte+0x12>
  400696:	4b0d      	ldr	r3, [pc, #52]	; (4006cc <gfx_mono_ssd1306_put_byte+0x40>)
  400698:	4798      	blx	r3
  40069a:	42b0      	cmp	r0, r6
  40069c:	d015      	beq.n	4006ca <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  40069e:	4632      	mov	r2, r6
  4006a0:	4629      	mov	r1, r5
  4006a2:	4620      	mov	r0, r4
  4006a4:	4b0a      	ldr	r3, [pc, #40]	; (4006d0 <gfx_mono_ssd1306_put_byte+0x44>)
  4006a6:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4006a8:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4006ac:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4006b0:	4c08      	ldr	r4, [pc, #32]	; (4006d4 <gfx_mono_ssd1306_put_byte+0x48>)
  4006b2:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  4006b4:	f3c5 1002 	ubfx	r0, r5, #4, #3
  4006b8:	f040 0010 	orr.w	r0, r0, #16
  4006bc:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  4006be:	f005 000f 	and.w	r0, r5, #15
  4006c2:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  4006c4:	4630      	mov	r0, r6
  4006c6:	4b04      	ldr	r3, [pc, #16]	; (4006d8 <gfx_mono_ssd1306_put_byte+0x4c>)
  4006c8:	4798      	blx	r3
  4006ca:	bd70      	pop	{r4, r5, r6, pc}
  4006cc:	00400481 	.word	0x00400481
  4006d0:	00400471 	.word	0x00400471
  4006d4:	0040079d 	.word	0x0040079d
  4006d8:	004009bd 	.word	0x004009bd

004006dc <gfx_mono_ssd1306_init>:
{
  4006dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  4006e0:	480d      	ldr	r0, [pc, #52]	; (400718 <gfx_mono_ssd1306_init+0x3c>)
  4006e2:	4b0e      	ldr	r3, [pc, #56]	; (40071c <gfx_mono_ssd1306_init+0x40>)
  4006e4:	4798      	blx	r3
	ssd1306_init();
  4006e6:	4b0e      	ldr	r3, [pc, #56]	; (400720 <gfx_mono_ssd1306_init+0x44>)
  4006e8:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  4006ea:	2040      	movs	r0, #64	; 0x40
  4006ec:	4b0d      	ldr	r3, [pc, #52]	; (400724 <gfx_mono_ssd1306_init+0x48>)
  4006ee:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4006f0:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4006f2:	f04f 0801 	mov.w	r8, #1
  4006f6:	462f      	mov	r7, r5
  4006f8:	4e0b      	ldr	r6, [pc, #44]	; (400728 <gfx_mono_ssd1306_init+0x4c>)
{
  4006fa:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4006fc:	4643      	mov	r3, r8
  4006fe:	463a      	mov	r2, r7
  400700:	b2e1      	uxtb	r1, r4
  400702:	4628      	mov	r0, r5
  400704:	47b0      	blx	r6
  400706:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400708:	2c80      	cmp	r4, #128	; 0x80
  40070a:	d1f7      	bne.n	4006fc <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  40070c:	3501      	adds	r5, #1
  40070e:	b2ed      	uxtb	r5, r5
  400710:	2d04      	cmp	r5, #4
  400712:	d1f2      	bne.n	4006fa <gfx_mono_ssd1306_init+0x1e>
  400714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400718:	20400478 	.word	0x20400478
  40071c:	00400465 	.word	0x00400465
  400720:	004007dd 	.word	0x004007dd
  400724:	0040079d 	.word	0x0040079d
  400728:	0040068d 	.word	0x0040068d

0040072c <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  40072c:	09c3      	lsrs	r3, r0, #7
  40072e:	d12a      	bne.n	400786 <gfx_mono_ssd1306_draw_pixel+0x5a>
  400730:	291f      	cmp	r1, #31
  400732:	d828      	bhi.n	400786 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400738:	4614      	mov	r4, r2
  40073a:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  40073c:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  40073e:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400742:	2201      	movs	r2, #1
  400744:	fa02 f701 	lsl.w	r7, r2, r1
  400748:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  40074c:	4601      	mov	r1, r0
  40074e:	4630      	mov	r0, r6
  400750:	4b0d      	ldr	r3, [pc, #52]	; (400788 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400752:	4798      	blx	r3
  400754:	4602      	mov	r2, r0
	switch (color) {
  400756:	2c01      	cmp	r4, #1
  400758:	d009      	beq.n	40076e <gfx_mono_ssd1306_draw_pixel+0x42>
  40075a:	b164      	cbz	r4, 400776 <gfx_mono_ssd1306_draw_pixel+0x4a>
  40075c:	2c02      	cmp	r4, #2
  40075e:	d00e      	beq.n	40077e <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400760:	2300      	movs	r3, #0
  400762:	4629      	mov	r1, r5
  400764:	4630      	mov	r0, r6
  400766:	4c09      	ldr	r4, [pc, #36]	; (40078c <gfx_mono_ssd1306_draw_pixel+0x60>)
  400768:	47a0      	blx	r4
  40076a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  40076e:	ea48 0200 	orr.w	r2, r8, r0
  400772:	b2d2      	uxtb	r2, r2
		break;
  400774:	e7f4      	b.n	400760 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400776:	ea20 0207 	bic.w	r2, r0, r7
  40077a:	b2d2      	uxtb	r2, r2
		break;
  40077c:	e7f0      	b.n	400760 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  40077e:	ea88 0200 	eor.w	r2, r8, r0
  400782:	b2d2      	uxtb	r2, r2
		break;
  400784:	e7ec      	b.n	400760 <gfx_mono_ssd1306_draw_pixel+0x34>
  400786:	4770      	bx	lr
  400788:	00400481 	.word	0x00400481
  40078c:	0040068d 	.word	0x0040068d

00400790 <gfx_mono_ssd1306_get_byte>:
{
  400790:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400792:	4b01      	ldr	r3, [pc, #4]	; (400798 <gfx_mono_ssd1306_get_byte+0x8>)
  400794:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400796:	bd08      	pop	{r3, pc}
  400798:	00400481 	.word	0x00400481

0040079c <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  40079c:	b538      	push	{r3, r4, r5, lr}
  40079e:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4007a0:	2208      	movs	r2, #8
  4007a2:	4b09      	ldr	r3, [pc, #36]	; (4007c8 <ssd1306_write_command+0x2c>)
  4007a4:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4007a6:	4c09      	ldr	r4, [pc, #36]	; (4007cc <ssd1306_write_command+0x30>)
  4007a8:	2101      	movs	r1, #1
  4007aa:	4620      	mov	r0, r4
  4007ac:	4b08      	ldr	r3, [pc, #32]	; (4007d0 <ssd1306_write_command+0x34>)
  4007ae:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4007b0:	2301      	movs	r3, #1
  4007b2:	461a      	mov	r2, r3
  4007b4:	4629      	mov	r1, r5
  4007b6:	4620      	mov	r0, r4
  4007b8:	4c06      	ldr	r4, [pc, #24]	; (4007d4 <ssd1306_write_command+0x38>)
  4007ba:	47a0      	blx	r4
	delay_us(10);
  4007bc:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  4007c0:	4b05      	ldr	r3, [pc, #20]	; (4007d8 <ssd1306_write_command+0x3c>)
  4007c2:	4798      	blx	r3
  4007c4:	bd38      	pop	{r3, r4, r5, pc}
  4007c6:	bf00      	nop
  4007c8:	400e1000 	.word	0x400e1000
  4007cc:	40008000 	.word	0x40008000
  4007d0:	0040029d 	.word	0x0040029d
  4007d4:	004002b3 	.word	0x004002b3
  4007d8:	20400001 	.word	0x20400001

004007dc <ssd1306_init>:
{
  4007dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4007e0:	4d66      	ldr	r5, [pc, #408]	; (40097c <ssd1306_init+0x1a0>)
  4007e2:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  4007e6:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4007e8:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4007ec:	4b64      	ldr	r3, [pc, #400]	; (400980 <ssd1306_init+0x1a4>)
  4007ee:	2708      	movs	r7, #8
  4007f0:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4007f2:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4007f6:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4007f8:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  4007fc:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  4007fe:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400800:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400804:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400806:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40080a:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40080c:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  40080e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400812:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400814:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400816:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40081a:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40081c:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40081e:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400822:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400824:	f022 0208 	bic.w	r2, r2, #8
  400828:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40082a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40082c:	f022 0208 	bic.w	r2, r2, #8
  400830:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400832:	601f      	str	r7, [r3, #0]
  400834:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400836:	631f      	str	r7, [r3, #48]	; 0x30
  400838:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  40083a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 4009b8 <ssd1306_init+0x1dc>
  40083e:	2300      	movs	r3, #0
  400840:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400844:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400848:	4640      	mov	r0, r8
  40084a:	4c4e      	ldr	r4, [pc, #312]	; (400984 <ssd1306_init+0x1a8>)
  40084c:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40084e:	2300      	movs	r3, #0
  400850:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400854:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400858:	4640      	mov	r0, r8
  40085a:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  40085c:	2300      	movs	r3, #0
  40085e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400862:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400866:	4640      	mov	r0, r8
  400868:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  40086a:	2300      	movs	r3, #0
  40086c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400870:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400874:	4640      	mov	r0, r8
  400876:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400878:	2300      	movs	r3, #0
  40087a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40087e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400882:	4640      	mov	r0, r8
  400884:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400886:	2300      	movs	r3, #0
  400888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40088c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400890:	4640      	mov	r0, r8
  400892:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400894:	4c3c      	ldr	r4, [pc, #240]	; (400988 <ssd1306_init+0x1ac>)
  400896:	f04f 0902 	mov.w	r9, #2
  40089a:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  40089e:	f04f 0880 	mov.w	r8, #128	; 0x80
  4008a2:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4008a6:	6863      	ldr	r3, [r4, #4]
  4008a8:	f043 0301 	orr.w	r3, r3, #1
  4008ac:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  4008ae:	463a      	mov	r2, r7
  4008b0:	2101      	movs	r1, #1
  4008b2:	4620      	mov	r0, r4
  4008b4:	4b35      	ldr	r3, [pc, #212]	; (40098c <ssd1306_init+0x1b0>)
  4008b6:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  4008b8:	2200      	movs	r2, #0
  4008ba:	2101      	movs	r1, #1
  4008bc:	4620      	mov	r0, r4
  4008be:	4b34      	ldr	r3, [pc, #208]	; (400990 <ssd1306_init+0x1b4>)
  4008c0:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  4008c2:	2200      	movs	r2, #0
  4008c4:	2101      	movs	r1, #1
  4008c6:	4620      	mov	r0, r4
  4008c8:	4b32      	ldr	r3, [pc, #200]	; (400994 <ssd1306_init+0x1b8>)
  4008ca:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4008cc:	6863      	ldr	r3, [r4, #4]
  4008ce:	f023 0302 	bic.w	r3, r3, #2
  4008d2:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  4008d4:	2200      	movs	r2, #0
  4008d6:	2101      	movs	r1, #1
  4008d8:	4620      	mov	r0, r4
  4008da:	4b2f      	ldr	r3, [pc, #188]	; (400998 <ssd1306_init+0x1bc>)
  4008dc:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4008de:	6863      	ldr	r3, [r4, #4]
  4008e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4008e4:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4008e6:	6863      	ldr	r3, [r4, #4]
  4008e8:	f043 0310 	orr.w	r3, r3, #16
  4008ec:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  4008ee:	492b      	ldr	r1, [pc, #172]	; (40099c <ssd1306_init+0x1c0>)
  4008f0:	482b      	ldr	r0, [pc, #172]	; (4009a0 <ssd1306_init+0x1c4>)
  4008f2:	4b2c      	ldr	r3, [pc, #176]	; (4009a4 <ssd1306_init+0x1c8>)
  4008f4:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  4008f6:	b2c2      	uxtb	r2, r0
  4008f8:	2101      	movs	r1, #1
  4008fa:	4620      	mov	r0, r4
  4008fc:	4b2a      	ldr	r3, [pc, #168]	; (4009a8 <ssd1306_init+0x1cc>)
  4008fe:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400900:	4620      	mov	r0, r4
  400902:	4b2a      	ldr	r3, [pc, #168]	; (4009ac <ssd1306_init+0x1d0>)
  400904:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400906:	2301      	movs	r3, #1
  400908:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40090a:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  40090c:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400910:	4c27      	ldr	r4, [pc, #156]	; (4009b0 <ssd1306_init+0x1d4>)
  400912:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400914:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400916:	f640 30b8 	movw	r0, #3000	; 0xbb8
  40091a:	47a0      	blx	r4
  40091c:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  40091e:	20a8      	movs	r0, #168	; 0xa8
  400920:	4c24      	ldr	r4, [pc, #144]	; (4009b4 <ssd1306_init+0x1d8>)
  400922:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400924:	201f      	movs	r0, #31
  400926:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400928:	20d3      	movs	r0, #211	; 0xd3
  40092a:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  40092c:	2000      	movs	r0, #0
  40092e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400930:	2040      	movs	r0, #64	; 0x40
  400932:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400934:	20a1      	movs	r0, #161	; 0xa1
  400936:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400938:	20c8      	movs	r0, #200	; 0xc8
  40093a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  40093c:	20da      	movs	r0, #218	; 0xda
  40093e:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400940:	4648      	mov	r0, r9
  400942:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400944:	2081      	movs	r0, #129	; 0x81
  400946:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400948:	208f      	movs	r0, #143	; 0x8f
  40094a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  40094c:	20a4      	movs	r0, #164	; 0xa4
  40094e:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400950:	20a6      	movs	r0, #166	; 0xa6
  400952:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400954:	20d5      	movs	r0, #213	; 0xd5
  400956:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400958:	4640      	mov	r0, r8
  40095a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  40095c:	208d      	movs	r0, #141	; 0x8d
  40095e:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400960:	2014      	movs	r0, #20
  400962:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400964:	20db      	movs	r0, #219	; 0xdb
  400966:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400968:	2040      	movs	r0, #64	; 0x40
  40096a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  40096c:	20d9      	movs	r0, #217	; 0xd9
  40096e:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400970:	20f1      	movs	r0, #241	; 0xf1
  400972:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400974:	20af      	movs	r0, #175	; 0xaf
  400976:	47a0      	blx	r4
  400978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40097c:	400e1200 	.word	0x400e1200
  400980:	400e1000 	.word	0x400e1000
  400984:	00400cc1 	.word	0x00400cc1
  400988:	40008000 	.word	0x40008000
  40098c:	00400323 	.word	0x00400323
  400990:	004002e7 	.word	0x004002e7
  400994:	00400305 	.word	0x00400305
  400998:	00400369 	.word	0x00400369
  40099c:	08f0d180 	.word	0x08f0d180
  4009a0:	000f4240 	.word	0x000f4240
  4009a4:	0040037d 	.word	0x0040037d
  4009a8:	00400393 	.word	0x00400393
  4009ac:	00400271 	.word	0x00400271
  4009b0:	20400001 	.word	0x20400001
  4009b4:	0040079d 	.word	0x0040079d
  4009b8:	400e1400 	.word	0x400e1400

004009bc <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  4009bc:	b538      	push	{r3, r4, r5, lr}
  4009be:	4605      	mov	r5, r0
  4009c0:	2208      	movs	r2, #8
  4009c2:	4b09      	ldr	r3, [pc, #36]	; (4009e8 <ssd1306_write_data+0x2c>)
  4009c4:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4009c6:	4c09      	ldr	r4, [pc, #36]	; (4009ec <ssd1306_write_data+0x30>)
  4009c8:	2101      	movs	r1, #1
  4009ca:	4620      	mov	r0, r4
  4009cc:	4b08      	ldr	r3, [pc, #32]	; (4009f0 <ssd1306_write_data+0x34>)
  4009ce:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  4009d0:	2301      	movs	r3, #1
  4009d2:	461a      	mov	r2, r3
  4009d4:	4629      	mov	r1, r5
  4009d6:	4620      	mov	r0, r4
  4009d8:	4c06      	ldr	r4, [pc, #24]	; (4009f4 <ssd1306_write_data+0x38>)
  4009da:	47a0      	blx	r4
	delay_us(10);
  4009dc:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  4009e0:	4b05      	ldr	r3, [pc, #20]	; (4009f8 <ssd1306_write_data+0x3c>)
  4009e2:	4798      	blx	r3
  4009e4:	bd38      	pop	{r3, r4, r5, pc}
  4009e6:	bf00      	nop
  4009e8:	400e1000 	.word	0x400e1000
  4009ec:	40008000 	.word	0x40008000
  4009f0:	0040029d 	.word	0x0040029d
  4009f4:	004002b3 	.word	0x004002b3
  4009f8:	20400001 	.word	0x20400001

004009fc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4009fc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4009fe:	4810      	ldr	r0, [pc, #64]	; (400a40 <sysclk_init+0x44>)
  400a00:	4b10      	ldr	r3, [pc, #64]	; (400a44 <sysclk_init+0x48>)
  400a02:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400a04:	213e      	movs	r1, #62	; 0x3e
  400a06:	2000      	movs	r0, #0
  400a08:	4b0f      	ldr	r3, [pc, #60]	; (400a48 <sysclk_init+0x4c>)
  400a0a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400a0c:	4c0f      	ldr	r4, [pc, #60]	; (400a4c <sysclk_init+0x50>)
  400a0e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400a10:	2800      	cmp	r0, #0
  400a12:	d0fc      	beq.n	400a0e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400a14:	4b0e      	ldr	r3, [pc, #56]	; (400a50 <sysclk_init+0x54>)
  400a16:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400a18:	4a0e      	ldr	r2, [pc, #56]	; (400a54 <sysclk_init+0x58>)
  400a1a:	4b0f      	ldr	r3, [pc, #60]	; (400a58 <sysclk_init+0x5c>)
  400a1c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400a1e:	4c0f      	ldr	r4, [pc, #60]	; (400a5c <sysclk_init+0x60>)
  400a20:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400a22:	2800      	cmp	r0, #0
  400a24:	d0fc      	beq.n	400a20 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400a26:	2002      	movs	r0, #2
  400a28:	4b0d      	ldr	r3, [pc, #52]	; (400a60 <sysclk_init+0x64>)
  400a2a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400a2c:	2000      	movs	r0, #0
  400a2e:	4b0d      	ldr	r3, [pc, #52]	; (400a64 <sysclk_init+0x68>)
  400a30:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400a32:	4b0d      	ldr	r3, [pc, #52]	; (400a68 <sysclk_init+0x6c>)
  400a34:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400a36:	4802      	ldr	r0, [pc, #8]	; (400a40 <sysclk_init+0x44>)
  400a38:	4b02      	ldr	r3, [pc, #8]	; (400a44 <sysclk_init+0x48>)
  400a3a:	4798      	blx	r3
  400a3c:	bd10      	pop	{r4, pc}
  400a3e:	bf00      	nop
  400a40:	11e1a300 	.word	0x11e1a300
  400a44:	0040120d 	.word	0x0040120d
  400a48:	00400f5d 	.word	0x00400f5d
  400a4c:	00400fb1 	.word	0x00400fb1
  400a50:	00400fc1 	.word	0x00400fc1
  400a54:	20183f01 	.word	0x20183f01
  400a58:	400e0600 	.word	0x400e0600
  400a5c:	00400fd1 	.word	0x00400fd1
  400a60:	00400ec1 	.word	0x00400ec1
  400a64:	00400ef9 	.word	0x00400ef9
  400a68:	00401101 	.word	0x00401101

00400a6c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a72:	4b48      	ldr	r3, [pc, #288]	; (400b94 <board_init+0x128>)
  400a74:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400a76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a7a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400a7e:	4b46      	ldr	r3, [pc, #280]	; (400b98 <board_init+0x12c>)
  400a80:	2200      	movs	r2, #0
  400a82:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400a86:	695a      	ldr	r2, [r3, #20]
  400a88:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400a8c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400a8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a92:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400a96:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400a9a:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400a9e:	f007 0007 	and.w	r0, r7, #7
  400aa2:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400aa4:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400aa8:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400aac:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400ab0:	f3bf 8f4f 	dsb	sy
  400ab4:	f04f 34ff 	mov.w	r4, #4294967295
  400ab8:	fa04 fc00 	lsl.w	ip, r4, r0
  400abc:	fa06 f000 	lsl.w	r0, r6, r0
  400ac0:	fa04 f40e 	lsl.w	r4, r4, lr
  400ac4:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400ac8:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400aca:	463a      	mov	r2, r7
  400acc:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400ace:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400ad2:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400ad6:	3a01      	subs	r2, #1
  400ad8:	4423      	add	r3, r4
  400ada:	f1b2 3fff 	cmp.w	r2, #4294967295
  400ade:	d1f6      	bne.n	400ace <board_init+0x62>
        } while(sets--);
  400ae0:	3e01      	subs	r6, #1
  400ae2:	4460      	add	r0, ip
  400ae4:	f1b6 3fff 	cmp.w	r6, #4294967295
  400ae8:	d1ef      	bne.n	400aca <board_init+0x5e>
  400aea:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400aee:	4b2a      	ldr	r3, [pc, #168]	; (400b98 <board_init+0x12c>)
  400af0:	695a      	ldr	r2, [r3, #20]
  400af2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400af6:	615a      	str	r2, [r3, #20]
  400af8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400afc:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b00:	4a26      	ldr	r2, [pc, #152]	; (400b9c <board_init+0x130>)
  400b02:	4927      	ldr	r1, [pc, #156]	; (400ba0 <board_init+0x134>)
  400b04:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b06:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400b0a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400b0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b10:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400b14:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400b18:	f022 0201 	bic.w	r2, r2, #1
  400b1c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400b20:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400b24:	f022 0201 	bic.w	r2, r2, #1
  400b28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400b2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b30:	f3bf 8f6f 	isb	sy
  400b34:	200a      	movs	r0, #10
  400b36:	4c1b      	ldr	r4, [pc, #108]	; (400ba4 <board_init+0x138>)
  400b38:	47a0      	blx	r4
  400b3a:	200b      	movs	r0, #11
  400b3c:	47a0      	blx	r4
  400b3e:	200c      	movs	r0, #12
  400b40:	47a0      	blx	r4
  400b42:	2010      	movs	r0, #16
  400b44:	47a0      	blx	r4
  400b46:	2011      	movs	r0, #17
  400b48:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b4a:	4b17      	ldr	r3, [pc, #92]	; (400ba8 <board_init+0x13c>)
  400b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400b50:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b52:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b56:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400b58:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400b60:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400b66:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400b68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b6c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400b6e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400b74:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400b76:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400b7a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b7c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400b7e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400b82:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400b84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400b88:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400b8c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b92:	bf00      	nop
  400b94:	400e1850 	.word	0x400e1850
  400b98:	e000ed00 	.word	0xe000ed00
  400b9c:	400e0c00 	.word	0x400e0c00
  400ba0:	5a00080c 	.word	0x5a00080c
  400ba4:	00400fe1 	.word	0x00400fe1
  400ba8:	400e1200 	.word	0x400e1200

00400bac <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400bac:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400bb0:	0053      	lsls	r3, r2, #1
  400bb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400bb6:	fbb2 f2f3 	udiv	r2, r2, r3
  400bba:	3a01      	subs	r2, #1
  400bbc:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400bc0:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400bc4:	4770      	bx	lr

00400bc6 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400bc6:	6301      	str	r1, [r0, #48]	; 0x30
  400bc8:	4770      	bx	lr

00400bca <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400bca:	6341      	str	r1, [r0, #52]	; 0x34
  400bcc:	4770      	bx	lr

00400bce <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400bce:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400bd0:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400bd4:	d03a      	beq.n	400c4c <pio_set_peripheral+0x7e>
  400bd6:	d813      	bhi.n	400c00 <pio_set_peripheral+0x32>
  400bd8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400bdc:	d025      	beq.n	400c2a <pio_set_peripheral+0x5c>
  400bde:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400be2:	d10a      	bne.n	400bfa <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400be4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400be6:	4313      	orrs	r3, r2
  400be8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400bea:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400bec:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400bee:	400b      	ands	r3, r1
  400bf0:	ea23 0302 	bic.w	r3, r3, r2
  400bf4:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400bf6:	6042      	str	r2, [r0, #4]
  400bf8:	4770      	bx	lr
	switch (ul_type) {
  400bfa:	2900      	cmp	r1, #0
  400bfc:	d1fb      	bne.n	400bf6 <pio_set_peripheral+0x28>
  400bfe:	4770      	bx	lr
  400c00:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400c04:	d021      	beq.n	400c4a <pio_set_peripheral+0x7c>
  400c06:	d809      	bhi.n	400c1c <pio_set_peripheral+0x4e>
  400c08:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400c0c:	d1f3      	bne.n	400bf6 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c0e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c10:	4313      	orrs	r3, r2
  400c12:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c14:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c16:	4313      	orrs	r3, r2
  400c18:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c1a:	e7ec      	b.n	400bf6 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400c1c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400c20:	d013      	beq.n	400c4a <pio_set_peripheral+0x7c>
  400c22:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400c26:	d010      	beq.n	400c4a <pio_set_peripheral+0x7c>
  400c28:	e7e5      	b.n	400bf6 <pio_set_peripheral+0x28>
{
  400c2a:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c2c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c2e:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400c30:	43d3      	mvns	r3, r2
  400c32:	4021      	ands	r1, r4
  400c34:	461c      	mov	r4, r3
  400c36:	4019      	ands	r1, r3
  400c38:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c3a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c3c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400c3e:	400b      	ands	r3, r1
  400c40:	4023      	ands	r3, r4
  400c42:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400c44:	6042      	str	r2, [r0, #4]
}
  400c46:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c4a:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c4c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c4e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400c50:	400b      	ands	r3, r1
  400c52:	ea23 0302 	bic.w	r3, r3, r2
  400c56:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c58:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c5a:	4313      	orrs	r3, r2
  400c5c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c5e:	e7ca      	b.n	400bf6 <pio_set_peripheral+0x28>

00400c60 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400c60:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400c62:	f012 0f01 	tst.w	r2, #1
  400c66:	d10d      	bne.n	400c84 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400c68:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400c6a:	f012 0f0a 	tst.w	r2, #10
  400c6e:	d00b      	beq.n	400c88 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400c70:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400c72:	f012 0f02 	tst.w	r2, #2
  400c76:	d109      	bne.n	400c8c <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400c78:	f012 0f08 	tst.w	r2, #8
  400c7c:	d008      	beq.n	400c90 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400c7e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400c82:	e005      	b.n	400c90 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400c84:	6641      	str	r1, [r0, #100]	; 0x64
  400c86:	e7f0      	b.n	400c6a <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400c88:	6241      	str	r1, [r0, #36]	; 0x24
  400c8a:	e7f2      	b.n	400c72 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400c8c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400c90:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400c92:	6001      	str	r1, [r0, #0]
  400c94:	4770      	bx	lr

00400c96 <pio_set_output>:
{
  400c96:	b410      	push	{r4}
  400c98:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400c9a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400c9c:	b94c      	cbnz	r4, 400cb2 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400c9e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400ca0:	b14b      	cbz	r3, 400cb6 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400ca2:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400ca4:	b94a      	cbnz	r2, 400cba <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400ca6:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400ca8:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400caa:	6001      	str	r1, [r0, #0]
}
  400cac:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cb0:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400cb2:	6641      	str	r1, [r0, #100]	; 0x64
  400cb4:	e7f4      	b.n	400ca0 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400cb6:	6541      	str	r1, [r0, #84]	; 0x54
  400cb8:	e7f4      	b.n	400ca4 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400cba:	6301      	str	r1, [r0, #48]	; 0x30
  400cbc:	e7f4      	b.n	400ca8 <pio_set_output+0x12>
	...

00400cc0 <pio_configure>:
{
  400cc0:	b570      	push	{r4, r5, r6, lr}
  400cc2:	b082      	sub	sp, #8
  400cc4:	4605      	mov	r5, r0
  400cc6:	4616      	mov	r6, r2
  400cc8:	461c      	mov	r4, r3
	switch (ul_type) {
  400cca:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400cce:	d014      	beq.n	400cfa <pio_configure+0x3a>
  400cd0:	d90a      	bls.n	400ce8 <pio_configure+0x28>
  400cd2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400cd6:	d024      	beq.n	400d22 <pio_configure+0x62>
  400cd8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400cdc:	d021      	beq.n	400d22 <pio_configure+0x62>
  400cde:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400ce2:	d017      	beq.n	400d14 <pio_configure+0x54>
		return 0;
  400ce4:	2000      	movs	r0, #0
  400ce6:	e01a      	b.n	400d1e <pio_configure+0x5e>
	switch (ul_type) {
  400ce8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400cec:	d005      	beq.n	400cfa <pio_configure+0x3a>
  400cee:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400cf2:	d002      	beq.n	400cfa <pio_configure+0x3a>
  400cf4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400cf8:	d1f4      	bne.n	400ce4 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400cfa:	4632      	mov	r2, r6
  400cfc:	4628      	mov	r0, r5
  400cfe:	4b11      	ldr	r3, [pc, #68]	; (400d44 <pio_configure+0x84>)
  400d00:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400d02:	f014 0f01 	tst.w	r4, #1
  400d06:	d102      	bne.n	400d0e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400d08:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400d0a:	2001      	movs	r0, #1
  400d0c:	e007      	b.n	400d1e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400d0e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400d10:	2001      	movs	r0, #1
  400d12:	e004      	b.n	400d1e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400d14:	461a      	mov	r2, r3
  400d16:	4631      	mov	r1, r6
  400d18:	4b0b      	ldr	r3, [pc, #44]	; (400d48 <pio_configure+0x88>)
  400d1a:	4798      	blx	r3
	return 1;
  400d1c:	2001      	movs	r0, #1
}
  400d1e:	b002      	add	sp, #8
  400d20:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400d22:	f004 0301 	and.w	r3, r4, #1
  400d26:	9300      	str	r3, [sp, #0]
  400d28:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400d2c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d30:	bf14      	ite	ne
  400d32:	2200      	movne	r2, #0
  400d34:	2201      	moveq	r2, #1
  400d36:	4631      	mov	r1, r6
  400d38:	4628      	mov	r0, r5
  400d3a:	4c04      	ldr	r4, [pc, #16]	; (400d4c <pio_configure+0x8c>)
  400d3c:	47a0      	blx	r4
	return 1;
  400d3e:	2001      	movs	r0, #1
		break;
  400d40:	e7ed      	b.n	400d1e <pio_configure+0x5e>
  400d42:	bf00      	nop
  400d44:	00400bcf 	.word	0x00400bcf
  400d48:	00400c61 	.word	0x00400c61
  400d4c:	00400c97 	.word	0x00400c97

00400d50 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400d50:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400d52:	420b      	tst	r3, r1
}
  400d54:	bf14      	ite	ne
  400d56:	2001      	movne	r0, #1
  400d58:	2000      	moveq	r0, #0
  400d5a:	4770      	bx	lr

00400d5c <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400d5c:	f012 0f10 	tst.w	r2, #16
  400d60:	d012      	beq.n	400d88 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400d62:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400d66:	f012 0f20 	tst.w	r2, #32
  400d6a:	d007      	beq.n	400d7c <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400d6c:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400d70:	f012 0f40 	tst.w	r2, #64	; 0x40
  400d74:	d005      	beq.n	400d82 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400d76:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400d7a:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400d7c:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400d80:	e7f6      	b.n	400d70 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400d82:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400d86:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400d88:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400d8c:	4770      	bx	lr

00400d8e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400d8e:	6401      	str	r1, [r0, #64]	; 0x40
  400d90:	4770      	bx	lr

00400d92 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400d92:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400d94:	4770      	bx	lr

00400d96 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400d96:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400d98:	4770      	bx	lr
	...

00400d9c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400da0:	4604      	mov	r4, r0
  400da2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400da4:	4b0e      	ldr	r3, [pc, #56]	; (400de0 <pio_handler_process+0x44>)
  400da6:	4798      	blx	r3
  400da8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400daa:	4620      	mov	r0, r4
  400dac:	4b0d      	ldr	r3, [pc, #52]	; (400de4 <pio_handler_process+0x48>)
  400dae:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400db0:	4005      	ands	r5, r0
  400db2:	d013      	beq.n	400ddc <pio_handler_process+0x40>
  400db4:	4c0c      	ldr	r4, [pc, #48]	; (400de8 <pio_handler_process+0x4c>)
  400db6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400dba:	e003      	b.n	400dc4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400dbc:	42b4      	cmp	r4, r6
  400dbe:	d00d      	beq.n	400ddc <pio_handler_process+0x40>
  400dc0:	3410      	adds	r4, #16
		while (status != 0) {
  400dc2:	b15d      	cbz	r5, 400ddc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400dc4:	6820      	ldr	r0, [r4, #0]
  400dc6:	4540      	cmp	r0, r8
  400dc8:	d1f8      	bne.n	400dbc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400dca:	6861      	ldr	r1, [r4, #4]
  400dcc:	4229      	tst	r1, r5
  400dce:	d0f5      	beq.n	400dbc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400dd0:	68e3      	ldr	r3, [r4, #12]
  400dd2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400dd4:	6863      	ldr	r3, [r4, #4]
  400dd6:	ea25 0503 	bic.w	r5, r5, r3
  400dda:	e7ef      	b.n	400dbc <pio_handler_process+0x20>
  400ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400de0:	00400d93 	.word	0x00400d93
  400de4:	00400d97 	.word	0x00400d97
  400de8:	20400678 	.word	0x20400678

00400dec <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400dee:	4c18      	ldr	r4, [pc, #96]	; (400e50 <pio_handler_set+0x64>)
  400df0:	6826      	ldr	r6, [r4, #0]
  400df2:	2e06      	cmp	r6, #6
  400df4:	d82a      	bhi.n	400e4c <pio_handler_set+0x60>
  400df6:	f04f 0c00 	mov.w	ip, #0
  400dfa:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400dfc:	4f15      	ldr	r7, [pc, #84]	; (400e54 <pio_handler_set+0x68>)
  400dfe:	e004      	b.n	400e0a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400e00:	3401      	adds	r4, #1
  400e02:	b2e4      	uxtb	r4, r4
  400e04:	46a4      	mov	ip, r4
  400e06:	42a6      	cmp	r6, r4
  400e08:	d309      	bcc.n	400e1e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400e0a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400e0c:	0125      	lsls	r5, r4, #4
  400e0e:	597d      	ldr	r5, [r7, r5]
  400e10:	428d      	cmp	r5, r1
  400e12:	d1f5      	bne.n	400e00 <pio_handler_set+0x14>
  400e14:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400e18:	686d      	ldr	r5, [r5, #4]
  400e1a:	4295      	cmp	r5, r2
  400e1c:	d1f0      	bne.n	400e00 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400e1e:	4d0d      	ldr	r5, [pc, #52]	; (400e54 <pio_handler_set+0x68>)
  400e20:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400e24:	eb05 040e 	add.w	r4, r5, lr
  400e28:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400e2c:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400e2e:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400e30:	9906      	ldr	r1, [sp, #24]
  400e32:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400e34:	3601      	adds	r6, #1
  400e36:	4566      	cmp	r6, ip
  400e38:	d005      	beq.n	400e46 <pio_handler_set+0x5a>
  400e3a:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400e3c:	461a      	mov	r2, r3
  400e3e:	4b06      	ldr	r3, [pc, #24]	; (400e58 <pio_handler_set+0x6c>)
  400e40:	4798      	blx	r3

	return 0;
  400e42:	2000      	movs	r0, #0
  400e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400e46:	4902      	ldr	r1, [pc, #8]	; (400e50 <pio_handler_set+0x64>)
  400e48:	600e      	str	r6, [r1, #0]
  400e4a:	e7f6      	b.n	400e3a <pio_handler_set+0x4e>
		return 1;
  400e4c:	2001      	movs	r0, #1
}
  400e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e50:	204006e8 	.word	0x204006e8
  400e54:	20400678 	.word	0x20400678
  400e58:	00400d5d 	.word	0x00400d5d

00400e5c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400e5c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400e5e:	210a      	movs	r1, #10
  400e60:	4801      	ldr	r0, [pc, #4]	; (400e68 <PIOA_Handler+0xc>)
  400e62:	4b02      	ldr	r3, [pc, #8]	; (400e6c <PIOA_Handler+0x10>)
  400e64:	4798      	blx	r3
  400e66:	bd08      	pop	{r3, pc}
  400e68:	400e0e00 	.word	0x400e0e00
  400e6c:	00400d9d 	.word	0x00400d9d

00400e70 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400e70:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400e72:	210b      	movs	r1, #11
  400e74:	4801      	ldr	r0, [pc, #4]	; (400e7c <PIOB_Handler+0xc>)
  400e76:	4b02      	ldr	r3, [pc, #8]	; (400e80 <PIOB_Handler+0x10>)
  400e78:	4798      	blx	r3
  400e7a:	bd08      	pop	{r3, pc}
  400e7c:	400e1000 	.word	0x400e1000
  400e80:	00400d9d 	.word	0x00400d9d

00400e84 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400e84:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400e86:	210c      	movs	r1, #12
  400e88:	4801      	ldr	r0, [pc, #4]	; (400e90 <PIOC_Handler+0xc>)
  400e8a:	4b02      	ldr	r3, [pc, #8]	; (400e94 <PIOC_Handler+0x10>)
  400e8c:	4798      	blx	r3
  400e8e:	bd08      	pop	{r3, pc}
  400e90:	400e1200 	.word	0x400e1200
  400e94:	00400d9d 	.word	0x00400d9d

00400e98 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400e98:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400e9a:	2110      	movs	r1, #16
  400e9c:	4801      	ldr	r0, [pc, #4]	; (400ea4 <PIOD_Handler+0xc>)
  400e9e:	4b02      	ldr	r3, [pc, #8]	; (400ea8 <PIOD_Handler+0x10>)
  400ea0:	4798      	blx	r3
  400ea2:	bd08      	pop	{r3, pc}
  400ea4:	400e1400 	.word	0x400e1400
  400ea8:	00400d9d 	.word	0x00400d9d

00400eac <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400eac:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400eae:	2111      	movs	r1, #17
  400eb0:	4801      	ldr	r0, [pc, #4]	; (400eb8 <PIOE_Handler+0xc>)
  400eb2:	4b02      	ldr	r3, [pc, #8]	; (400ebc <PIOE_Handler+0x10>)
  400eb4:	4798      	blx	r3
  400eb6:	bd08      	pop	{r3, pc}
  400eb8:	400e1600 	.word	0x400e1600
  400ebc:	00400d9d 	.word	0x00400d9d

00400ec0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400ec0:	2803      	cmp	r0, #3
  400ec2:	d011      	beq.n	400ee8 <pmc_mck_set_division+0x28>
  400ec4:	2804      	cmp	r0, #4
  400ec6:	d012      	beq.n	400eee <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400ec8:	2802      	cmp	r0, #2
  400eca:	bf0c      	ite	eq
  400ecc:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400ed0:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400ed2:	4a08      	ldr	r2, [pc, #32]	; (400ef4 <pmc_mck_set_division+0x34>)
  400ed4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400eda:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400edc:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400ede:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ee0:	f013 0f08 	tst.w	r3, #8
  400ee4:	d0fb      	beq.n	400ede <pmc_mck_set_division+0x1e>
}
  400ee6:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400ee8:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400eec:	e7f1      	b.n	400ed2 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400eee:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400ef2:	e7ee      	b.n	400ed2 <pmc_mck_set_division+0x12>
  400ef4:	400e0600 	.word	0x400e0600

00400ef8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400ef8:	4a17      	ldr	r2, [pc, #92]	; (400f58 <pmc_switch_mck_to_pllack+0x60>)
  400efa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400f00:	4318      	orrs	r0, r3
  400f02:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f04:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f06:	f013 0f08 	tst.w	r3, #8
  400f0a:	d10a      	bne.n	400f22 <pmc_switch_mck_to_pllack+0x2a>
  400f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f10:	4911      	ldr	r1, [pc, #68]	; (400f58 <pmc_switch_mck_to_pllack+0x60>)
  400f12:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f14:	f012 0f08 	tst.w	r2, #8
  400f18:	d103      	bne.n	400f22 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f1a:	3b01      	subs	r3, #1
  400f1c:	d1f9      	bne.n	400f12 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400f1e:	2001      	movs	r0, #1
  400f20:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400f22:	4a0d      	ldr	r2, [pc, #52]	; (400f58 <pmc_switch_mck_to_pllack+0x60>)
  400f24:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f26:	f023 0303 	bic.w	r3, r3, #3
  400f2a:	f043 0302 	orr.w	r3, r3, #2
  400f2e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f30:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f32:	f013 0f08 	tst.w	r3, #8
  400f36:	d10a      	bne.n	400f4e <pmc_switch_mck_to_pllack+0x56>
  400f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f3c:	4906      	ldr	r1, [pc, #24]	; (400f58 <pmc_switch_mck_to_pllack+0x60>)
  400f3e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f40:	f012 0f08 	tst.w	r2, #8
  400f44:	d105      	bne.n	400f52 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f46:	3b01      	subs	r3, #1
  400f48:	d1f9      	bne.n	400f3e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400f4a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400f4c:	4770      	bx	lr
	return 0;
  400f4e:	2000      	movs	r0, #0
  400f50:	4770      	bx	lr
  400f52:	2000      	movs	r0, #0
  400f54:	4770      	bx	lr
  400f56:	bf00      	nop
  400f58:	400e0600 	.word	0x400e0600

00400f5c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400f5c:	b9a0      	cbnz	r0, 400f88 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f5e:	480e      	ldr	r0, [pc, #56]	; (400f98 <pmc_switch_mainck_to_xtal+0x3c>)
  400f60:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400f62:	0209      	lsls	r1, r1, #8
  400f64:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400f66:	4a0d      	ldr	r2, [pc, #52]	; (400f9c <pmc_switch_mainck_to_xtal+0x40>)
  400f68:	401a      	ands	r2, r3
  400f6a:	4b0d      	ldr	r3, [pc, #52]	; (400fa0 <pmc_switch_mainck_to_xtal+0x44>)
  400f6c:	4313      	orrs	r3, r2
  400f6e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f70:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400f72:	4602      	mov	r2, r0
  400f74:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f76:	f013 0f01 	tst.w	r3, #1
  400f7a:	d0fb      	beq.n	400f74 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400f7c:	4a06      	ldr	r2, [pc, #24]	; (400f98 <pmc_switch_mainck_to_xtal+0x3c>)
  400f7e:	6a11      	ldr	r1, [r2, #32]
  400f80:	4b08      	ldr	r3, [pc, #32]	; (400fa4 <pmc_switch_mainck_to_xtal+0x48>)
  400f82:	430b      	orrs	r3, r1
  400f84:	6213      	str	r3, [r2, #32]
  400f86:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400f88:	4903      	ldr	r1, [pc, #12]	; (400f98 <pmc_switch_mainck_to_xtal+0x3c>)
  400f8a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400f8c:	4a06      	ldr	r2, [pc, #24]	; (400fa8 <pmc_switch_mainck_to_xtal+0x4c>)
  400f8e:	401a      	ands	r2, r3
  400f90:	4b06      	ldr	r3, [pc, #24]	; (400fac <pmc_switch_mainck_to_xtal+0x50>)
  400f92:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400f94:	620b      	str	r3, [r1, #32]
  400f96:	4770      	bx	lr
  400f98:	400e0600 	.word	0x400e0600
  400f9c:	ffc8fffc 	.word	0xffc8fffc
  400fa0:	00370001 	.word	0x00370001
  400fa4:	01370000 	.word	0x01370000
  400fa8:	fec8fffc 	.word	0xfec8fffc
  400fac:	01370002 	.word	0x01370002

00400fb0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400fb0:	4b02      	ldr	r3, [pc, #8]	; (400fbc <pmc_osc_is_ready_mainck+0xc>)
  400fb2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400fb4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400fb8:	4770      	bx	lr
  400fba:	bf00      	nop
  400fbc:	400e0600 	.word	0x400e0600

00400fc0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400fc0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400fc4:	4b01      	ldr	r3, [pc, #4]	; (400fcc <pmc_disable_pllack+0xc>)
  400fc6:	629a      	str	r2, [r3, #40]	; 0x28
  400fc8:	4770      	bx	lr
  400fca:	bf00      	nop
  400fcc:	400e0600 	.word	0x400e0600

00400fd0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400fd0:	4b02      	ldr	r3, [pc, #8]	; (400fdc <pmc_is_locked_pllack+0xc>)
  400fd2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400fd4:	f000 0002 	and.w	r0, r0, #2
  400fd8:	4770      	bx	lr
  400fda:	bf00      	nop
  400fdc:	400e0600 	.word	0x400e0600

00400fe0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400fe0:	283f      	cmp	r0, #63	; 0x3f
  400fe2:	d81e      	bhi.n	401022 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400fe4:	281f      	cmp	r0, #31
  400fe6:	d80c      	bhi.n	401002 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400fe8:	4b11      	ldr	r3, [pc, #68]	; (401030 <pmc_enable_periph_clk+0x50>)
  400fea:	699a      	ldr	r2, [r3, #24]
  400fec:	2301      	movs	r3, #1
  400fee:	4083      	lsls	r3, r0
  400ff0:	4393      	bics	r3, r2
  400ff2:	d018      	beq.n	401026 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400ff4:	2301      	movs	r3, #1
  400ff6:	fa03 f000 	lsl.w	r0, r3, r0
  400ffa:	4b0d      	ldr	r3, [pc, #52]	; (401030 <pmc_enable_periph_clk+0x50>)
  400ffc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400ffe:	2000      	movs	r0, #0
  401000:	4770      	bx	lr
		ul_id -= 32;
  401002:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401004:	4b0a      	ldr	r3, [pc, #40]	; (401030 <pmc_enable_periph_clk+0x50>)
  401006:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40100a:	2301      	movs	r3, #1
  40100c:	4083      	lsls	r3, r0
  40100e:	4393      	bics	r3, r2
  401010:	d00b      	beq.n	40102a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401012:	2301      	movs	r3, #1
  401014:	fa03 f000 	lsl.w	r0, r3, r0
  401018:	4b05      	ldr	r3, [pc, #20]	; (401030 <pmc_enable_periph_clk+0x50>)
  40101a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40101e:	2000      	movs	r0, #0
  401020:	4770      	bx	lr
		return 1;
  401022:	2001      	movs	r0, #1
  401024:	4770      	bx	lr
	return 0;
  401026:	2000      	movs	r0, #0
  401028:	4770      	bx	lr
  40102a:	2000      	movs	r0, #0
}
  40102c:	4770      	bx	lr
  40102e:	bf00      	nop
  401030:	400e0600 	.word	0x400e0600

00401034 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401034:	e7fe      	b.n	401034 <Dummy_Handler>
	...

00401038 <Reset_Handler>:
{
  401038:	b500      	push	{lr}
  40103a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40103c:	4b25      	ldr	r3, [pc, #148]	; (4010d4 <Reset_Handler+0x9c>)
  40103e:	4a26      	ldr	r2, [pc, #152]	; (4010d8 <Reset_Handler+0xa0>)
  401040:	429a      	cmp	r2, r3
  401042:	d010      	beq.n	401066 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401044:	4b25      	ldr	r3, [pc, #148]	; (4010dc <Reset_Handler+0xa4>)
  401046:	4a23      	ldr	r2, [pc, #140]	; (4010d4 <Reset_Handler+0x9c>)
  401048:	429a      	cmp	r2, r3
  40104a:	d20c      	bcs.n	401066 <Reset_Handler+0x2e>
  40104c:	3b01      	subs	r3, #1
  40104e:	1a9b      	subs	r3, r3, r2
  401050:	f023 0303 	bic.w	r3, r3, #3
  401054:	3304      	adds	r3, #4
  401056:	4413      	add	r3, r2
  401058:	491f      	ldr	r1, [pc, #124]	; (4010d8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40105a:	f851 0b04 	ldr.w	r0, [r1], #4
  40105e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401062:	429a      	cmp	r2, r3
  401064:	d1f9      	bne.n	40105a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401066:	4b1e      	ldr	r3, [pc, #120]	; (4010e0 <Reset_Handler+0xa8>)
  401068:	4a1e      	ldr	r2, [pc, #120]	; (4010e4 <Reset_Handler+0xac>)
  40106a:	429a      	cmp	r2, r3
  40106c:	d20a      	bcs.n	401084 <Reset_Handler+0x4c>
  40106e:	3b01      	subs	r3, #1
  401070:	1a9b      	subs	r3, r3, r2
  401072:	f023 0303 	bic.w	r3, r3, #3
  401076:	3304      	adds	r3, #4
  401078:	4413      	add	r3, r2
                *pDest++ = 0;
  40107a:	2100      	movs	r1, #0
  40107c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401080:	4293      	cmp	r3, r2
  401082:	d1fb      	bne.n	40107c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401084:	4a18      	ldr	r2, [pc, #96]	; (4010e8 <Reset_Handler+0xb0>)
  401086:	4b19      	ldr	r3, [pc, #100]	; (4010ec <Reset_Handler+0xb4>)
  401088:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40108c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40108e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401092:	fab3 f383 	clz	r3, r3
  401096:	095b      	lsrs	r3, r3, #5
  401098:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40109a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40109c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4010a0:	2200      	movs	r2, #0
  4010a2:	4b13      	ldr	r3, [pc, #76]	; (4010f0 <Reset_Handler+0xb8>)
  4010a4:	701a      	strb	r2, [r3, #0]
	return flags;
  4010a6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4010a8:	4a12      	ldr	r2, [pc, #72]	; (4010f4 <Reset_Handler+0xbc>)
  4010aa:	6813      	ldr	r3, [r2, #0]
  4010ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4010b0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4010b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4010b6:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4010ba:	b129      	cbz	r1, 4010c8 <Reset_Handler+0x90>
		cpu_irq_enable();
  4010bc:	2201      	movs	r2, #1
  4010be:	4b0c      	ldr	r3, [pc, #48]	; (4010f0 <Reset_Handler+0xb8>)
  4010c0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4010c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4010c6:	b662      	cpsie	i
        __libc_init_array();
  4010c8:	4b0b      	ldr	r3, [pc, #44]	; (4010f8 <Reset_Handler+0xc0>)
  4010ca:	4798      	blx	r3
        main();
  4010cc:	4b0b      	ldr	r3, [pc, #44]	; (4010fc <Reset_Handler+0xc4>)
  4010ce:	4798      	blx	r3
  4010d0:	e7fe      	b.n	4010d0 <Reset_Handler+0x98>
  4010d2:	bf00      	nop
  4010d4:	20400000 	.word	0x20400000
  4010d8:	0040237c 	.word	0x0040237c
  4010dc:	20400454 	.word	0x20400454
  4010e0:	20400718 	.word	0x20400718
  4010e4:	20400454 	.word	0x20400454
  4010e8:	e000ed00 	.word	0xe000ed00
  4010ec:	00400000 	.word	0x00400000
  4010f0:	20400018 	.word	0x20400018
  4010f4:	e000ed88 	.word	0xe000ed88
  4010f8:	00401791 	.word	0x00401791
  4010fc:	00401699 	.word	0x00401699

00401100 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401100:	4b3b      	ldr	r3, [pc, #236]	; (4011f0 <SystemCoreClockUpdate+0xf0>)
  401102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401104:	f003 0303 	and.w	r3, r3, #3
  401108:	2b01      	cmp	r3, #1
  40110a:	d01d      	beq.n	401148 <SystemCoreClockUpdate+0x48>
  40110c:	b183      	cbz	r3, 401130 <SystemCoreClockUpdate+0x30>
  40110e:	2b02      	cmp	r3, #2
  401110:	d036      	beq.n	401180 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401112:	4b37      	ldr	r3, [pc, #220]	; (4011f0 <SystemCoreClockUpdate+0xf0>)
  401114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401116:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40111a:	2b70      	cmp	r3, #112	; 0x70
  40111c:	d05f      	beq.n	4011de <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40111e:	4b34      	ldr	r3, [pc, #208]	; (4011f0 <SystemCoreClockUpdate+0xf0>)
  401120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401122:	4934      	ldr	r1, [pc, #208]	; (4011f4 <SystemCoreClockUpdate+0xf4>)
  401124:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401128:	680b      	ldr	r3, [r1, #0]
  40112a:	40d3      	lsrs	r3, r2
  40112c:	600b      	str	r3, [r1, #0]
  40112e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401130:	4b31      	ldr	r3, [pc, #196]	; (4011f8 <SystemCoreClockUpdate+0xf8>)
  401132:	695b      	ldr	r3, [r3, #20]
  401134:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401138:	bf14      	ite	ne
  40113a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40113e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401142:	4b2c      	ldr	r3, [pc, #176]	; (4011f4 <SystemCoreClockUpdate+0xf4>)
  401144:	601a      	str	r2, [r3, #0]
  401146:	e7e4      	b.n	401112 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401148:	4b29      	ldr	r3, [pc, #164]	; (4011f0 <SystemCoreClockUpdate+0xf0>)
  40114a:	6a1b      	ldr	r3, [r3, #32]
  40114c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401150:	d003      	beq.n	40115a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401152:	4a2a      	ldr	r2, [pc, #168]	; (4011fc <SystemCoreClockUpdate+0xfc>)
  401154:	4b27      	ldr	r3, [pc, #156]	; (4011f4 <SystemCoreClockUpdate+0xf4>)
  401156:	601a      	str	r2, [r3, #0]
  401158:	e7db      	b.n	401112 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40115a:	4a29      	ldr	r2, [pc, #164]	; (401200 <SystemCoreClockUpdate+0x100>)
  40115c:	4b25      	ldr	r3, [pc, #148]	; (4011f4 <SystemCoreClockUpdate+0xf4>)
  40115e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401160:	4b23      	ldr	r3, [pc, #140]	; (4011f0 <SystemCoreClockUpdate+0xf0>)
  401162:	6a1b      	ldr	r3, [r3, #32]
  401164:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401168:	2b10      	cmp	r3, #16
  40116a:	d005      	beq.n	401178 <SystemCoreClockUpdate+0x78>
  40116c:	2b20      	cmp	r3, #32
  40116e:	d1d0      	bne.n	401112 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401170:	4a22      	ldr	r2, [pc, #136]	; (4011fc <SystemCoreClockUpdate+0xfc>)
  401172:	4b20      	ldr	r3, [pc, #128]	; (4011f4 <SystemCoreClockUpdate+0xf4>)
  401174:	601a      	str	r2, [r3, #0]
          break;
  401176:	e7cc      	b.n	401112 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401178:	4a22      	ldr	r2, [pc, #136]	; (401204 <SystemCoreClockUpdate+0x104>)
  40117a:	4b1e      	ldr	r3, [pc, #120]	; (4011f4 <SystemCoreClockUpdate+0xf4>)
  40117c:	601a      	str	r2, [r3, #0]
          break;
  40117e:	e7c8      	b.n	401112 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401180:	4b1b      	ldr	r3, [pc, #108]	; (4011f0 <SystemCoreClockUpdate+0xf0>)
  401182:	6a1b      	ldr	r3, [r3, #32]
  401184:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401188:	d016      	beq.n	4011b8 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40118a:	4a1c      	ldr	r2, [pc, #112]	; (4011fc <SystemCoreClockUpdate+0xfc>)
  40118c:	4b19      	ldr	r3, [pc, #100]	; (4011f4 <SystemCoreClockUpdate+0xf4>)
  40118e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401190:	4b17      	ldr	r3, [pc, #92]	; (4011f0 <SystemCoreClockUpdate+0xf0>)
  401192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401194:	f003 0303 	and.w	r3, r3, #3
  401198:	2b02      	cmp	r3, #2
  40119a:	d1ba      	bne.n	401112 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40119c:	4a14      	ldr	r2, [pc, #80]	; (4011f0 <SystemCoreClockUpdate+0xf0>)
  40119e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4011a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4011a2:	4814      	ldr	r0, [pc, #80]	; (4011f4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4011a4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4011a8:	6803      	ldr	r3, [r0, #0]
  4011aa:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4011ae:	b2d2      	uxtb	r2, r2
  4011b0:	fbb3 f3f2 	udiv	r3, r3, r2
  4011b4:	6003      	str	r3, [r0, #0]
  4011b6:	e7ac      	b.n	401112 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4011b8:	4a11      	ldr	r2, [pc, #68]	; (401200 <SystemCoreClockUpdate+0x100>)
  4011ba:	4b0e      	ldr	r3, [pc, #56]	; (4011f4 <SystemCoreClockUpdate+0xf4>)
  4011bc:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4011be:	4b0c      	ldr	r3, [pc, #48]	; (4011f0 <SystemCoreClockUpdate+0xf0>)
  4011c0:	6a1b      	ldr	r3, [r3, #32]
  4011c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011c6:	2b10      	cmp	r3, #16
  4011c8:	d005      	beq.n	4011d6 <SystemCoreClockUpdate+0xd6>
  4011ca:	2b20      	cmp	r3, #32
  4011cc:	d1e0      	bne.n	401190 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4011ce:	4a0b      	ldr	r2, [pc, #44]	; (4011fc <SystemCoreClockUpdate+0xfc>)
  4011d0:	4b08      	ldr	r3, [pc, #32]	; (4011f4 <SystemCoreClockUpdate+0xf4>)
  4011d2:	601a      	str	r2, [r3, #0]
          break;
  4011d4:	e7dc      	b.n	401190 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4011d6:	4a0b      	ldr	r2, [pc, #44]	; (401204 <SystemCoreClockUpdate+0x104>)
  4011d8:	4b06      	ldr	r3, [pc, #24]	; (4011f4 <SystemCoreClockUpdate+0xf4>)
  4011da:	601a      	str	r2, [r3, #0]
          break;
  4011dc:	e7d8      	b.n	401190 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4011de:	4a05      	ldr	r2, [pc, #20]	; (4011f4 <SystemCoreClockUpdate+0xf4>)
  4011e0:	6813      	ldr	r3, [r2, #0]
  4011e2:	4909      	ldr	r1, [pc, #36]	; (401208 <SystemCoreClockUpdate+0x108>)
  4011e4:	fba1 1303 	umull	r1, r3, r1, r3
  4011e8:	085b      	lsrs	r3, r3, #1
  4011ea:	6013      	str	r3, [r2, #0]
  4011ec:	4770      	bx	lr
  4011ee:	bf00      	nop
  4011f0:	400e0600 	.word	0x400e0600
  4011f4:	2040001c 	.word	0x2040001c
  4011f8:	400e1810 	.word	0x400e1810
  4011fc:	00b71b00 	.word	0x00b71b00
  401200:	003d0900 	.word	0x003d0900
  401204:	007a1200 	.word	0x007a1200
  401208:	aaaaaaab 	.word	0xaaaaaaab

0040120c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40120c:	4b16      	ldr	r3, [pc, #88]	; (401268 <system_init_flash+0x5c>)
  40120e:	4298      	cmp	r0, r3
  401210:	d913      	bls.n	40123a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401212:	4b16      	ldr	r3, [pc, #88]	; (40126c <system_init_flash+0x60>)
  401214:	4298      	cmp	r0, r3
  401216:	d915      	bls.n	401244 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401218:	4b15      	ldr	r3, [pc, #84]	; (401270 <system_init_flash+0x64>)
  40121a:	4298      	cmp	r0, r3
  40121c:	d916      	bls.n	40124c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40121e:	4b15      	ldr	r3, [pc, #84]	; (401274 <system_init_flash+0x68>)
  401220:	4298      	cmp	r0, r3
  401222:	d917      	bls.n	401254 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401224:	4b14      	ldr	r3, [pc, #80]	; (401278 <system_init_flash+0x6c>)
  401226:	4298      	cmp	r0, r3
  401228:	d918      	bls.n	40125c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40122a:	4b14      	ldr	r3, [pc, #80]	; (40127c <system_init_flash+0x70>)
  40122c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40122e:	bf94      	ite	ls
  401230:	4a13      	ldrls	r2, [pc, #76]	; (401280 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401232:	4a14      	ldrhi	r2, [pc, #80]	; (401284 <system_init_flash+0x78>)
  401234:	4b14      	ldr	r3, [pc, #80]	; (401288 <system_init_flash+0x7c>)
  401236:	601a      	str	r2, [r3, #0]
  401238:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40123a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40123e:	4b12      	ldr	r3, [pc, #72]	; (401288 <system_init_flash+0x7c>)
  401240:	601a      	str	r2, [r3, #0]
  401242:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401244:	4a11      	ldr	r2, [pc, #68]	; (40128c <system_init_flash+0x80>)
  401246:	4b10      	ldr	r3, [pc, #64]	; (401288 <system_init_flash+0x7c>)
  401248:	601a      	str	r2, [r3, #0]
  40124a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40124c:	4a10      	ldr	r2, [pc, #64]	; (401290 <system_init_flash+0x84>)
  40124e:	4b0e      	ldr	r3, [pc, #56]	; (401288 <system_init_flash+0x7c>)
  401250:	601a      	str	r2, [r3, #0]
  401252:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401254:	4a0f      	ldr	r2, [pc, #60]	; (401294 <system_init_flash+0x88>)
  401256:	4b0c      	ldr	r3, [pc, #48]	; (401288 <system_init_flash+0x7c>)
  401258:	601a      	str	r2, [r3, #0]
  40125a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40125c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401260:	4b09      	ldr	r3, [pc, #36]	; (401288 <system_init_flash+0x7c>)
  401262:	601a      	str	r2, [r3, #0]
  401264:	4770      	bx	lr
  401266:	bf00      	nop
  401268:	015ef3bf 	.word	0x015ef3bf
  40126c:	02bde77f 	.word	0x02bde77f
  401270:	041cdb3f 	.word	0x041cdb3f
  401274:	057bceff 	.word	0x057bceff
  401278:	06dac2bf 	.word	0x06dac2bf
  40127c:	0839b67f 	.word	0x0839b67f
  401280:	04000500 	.word	0x04000500
  401284:	04000600 	.word	0x04000600
  401288:	400e0c00 	.word	0x400e0c00
  40128c:	04000100 	.word	0x04000100
  401290:	04000200 	.word	0x04000200
  401294:	04000300 	.word	0x04000300

00401298 <but1_callback>:

volatile char flag_rtt_alarme   = 0;
volatile char flag_leds_ligados = 1;

void but1_callback() {
	led1_on = !led1_on;
  401298:	4a03      	ldr	r2, [pc, #12]	; (4012a8 <but1_callback+0x10>)
  40129a:	7813      	ldrb	r3, [r2, #0]
  40129c:	fab3 f383 	clz	r3, r3
  4012a0:	095b      	lsrs	r3, r3, #5
  4012a2:	7013      	strb	r3, [r2, #0]
  4012a4:	4770      	bx	lr
  4012a6:	bf00      	nop
  4012a8:	20400021 	.word	0x20400021

004012ac <but2_callback>:
}

void but2_callback() {
	led2_on = !led2_on;
  4012ac:	4a03      	ldr	r2, [pc, #12]	; (4012bc <but2_callback+0x10>)
  4012ae:	7813      	ldrb	r3, [r2, #0]
  4012b0:	fab3 f383 	clz	r3, r3
  4012b4:	095b      	lsrs	r3, r3, #5
  4012b6:	7013      	strb	r3, [r2, #0]
  4012b8:	4770      	bx	lr
  4012ba:	bf00      	nop
  4012bc:	204006f0 	.word	0x204006f0

004012c0 <but3_callback>:
}

void but3_callback() {
	led3_on = !led3_on;
  4012c0:	4a03      	ldr	r2, [pc, #12]	; (4012d0 <but3_callback+0x10>)
  4012c2:	7813      	ldrb	r3, [r2, #0]
  4012c4:	fab3 f383 	clz	r3, r3
  4012c8:	095b      	lsrs	r3, r3, #5
  4012ca:	7013      	strb	r3, [r2, #0]
  4012cc:	4770      	bx	lr
  4012ce:	bf00      	nop
  4012d0:	20400022 	.word	0x20400022

004012d4 <pin_toggle>:
}

void pin_toggle(Pio *pio, uint32_t mask){
  4012d4:	b538      	push	{r3, r4, r5, lr}
  4012d6:	4604      	mov	r4, r0
  4012d8:	460d      	mov	r5, r1
	if(pio_get_output_data_status(pio, mask)) {
  4012da:	4b06      	ldr	r3, [pc, #24]	; (4012f4 <pin_toggle+0x20>)
  4012dc:	4798      	blx	r3
  4012de:	b920      	cbnz	r0, 4012ea <pin_toggle+0x16>
		pio_clear(pio, mask);
	}
	else
	pio_set(pio,mask);
  4012e0:	4629      	mov	r1, r5
  4012e2:	4620      	mov	r0, r4
  4012e4:	4b04      	ldr	r3, [pc, #16]	; (4012f8 <pin_toggle+0x24>)
  4012e6:	4798      	blx	r3
  4012e8:	bd38      	pop	{r3, r4, r5, pc}
		pio_clear(pio, mask);
  4012ea:	4629      	mov	r1, r5
  4012ec:	4620      	mov	r0, r4
  4012ee:	4b03      	ldr	r3, [pc, #12]	; (4012fc <pin_toggle+0x28>)
  4012f0:	4798      	blx	r3
  4012f2:	bd38      	pop	{r3, r4, r5, pc}
  4012f4:	00400d51 	.word	0x00400d51
  4012f8:	00400bc7 	.word	0x00400bc7
  4012fc:	00400bcb 	.word	0x00400bcb

00401300 <leds_init>:
}

void leds_init(void) {
  401300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Configura led
	pmc_enable_periph_clk(LED1_PIO_ID);
  401302:	200a      	movs	r0, #10
  401304:	4c14      	ldr	r4, [pc, #80]	; (401358 <leds_init+0x58>)
  401306:	47a0      	blx	r4
	pmc_enable_periph_clk(LED2_PIO_ID);
  401308:	200c      	movs	r0, #12
  40130a:	47a0      	blx	r4
	pmc_enable_periph_clk(LED3_PIO_ID);
  40130c:	200b      	movs	r0, #11
  40130e:	47a0      	blx	r4
	
	pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_IDX_MASK, PIO_DEFAULT);
  401310:	4f12      	ldr	r7, [pc, #72]	; (40135c <leds_init+0x5c>)
  401312:	2300      	movs	r3, #0
  401314:	2201      	movs	r2, #1
  401316:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40131a:	4638      	mov	r0, r7
  40131c:	4c10      	ldr	r4, [pc, #64]	; (401360 <leds_init+0x60>)
  40131e:	47a0      	blx	r4
	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_IDX_MASK, PIO_DEFAULT);
  401320:	4e10      	ldr	r6, [pc, #64]	; (401364 <leds_init+0x64>)
  401322:	2300      	movs	r3, #0
  401324:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401328:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40132c:	4630      	mov	r0, r6
  40132e:	47a0      	blx	r4
	pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_IDX_MASK, PIO_DEFAULT);
  401330:	4d0d      	ldr	r5, [pc, #52]	; (401368 <leds_init+0x68>)
  401332:	2300      	movs	r3, #0
  401334:	2204      	movs	r2, #4
  401336:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40133a:	4628      	mov	r0, r5
  40133c:	47a0      	blx	r4
	
	pio_clear(LED1_PIO, LED1_IDX_MASK); //inicializa led aceso
  40133e:	2101      	movs	r1, #1
  401340:	4638      	mov	r0, r7
  401342:	4c0a      	ldr	r4, [pc, #40]	; (40136c <leds_init+0x6c>)
  401344:	47a0      	blx	r4
	pio_set  (LED2_PIO, LED2_IDX_MASK); //inicializa led apagados
  401346:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40134a:	4630      	mov	r0, r6
  40134c:	4b08      	ldr	r3, [pc, #32]	; (401370 <leds_init+0x70>)
  40134e:	4798      	blx	r3
	pio_clear(LED3_PIO, LED3_IDX_MASK); //inicializa led aceso
  401350:	2104      	movs	r1, #4
  401352:	4628      	mov	r0, r5
  401354:	47a0      	blx	r4
  401356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401358:	00400fe1 	.word	0x00400fe1
  40135c:	400e0e00 	.word	0x400e0e00
  401360:	00400cc1 	.word	0x00400cc1
  401364:	400e1200 	.word	0x400e1200
  401368:	400e1000 	.word	0x400e1000
  40136c:	00400bcb 	.word	0x00400bcb
  401370:	00400bc7 	.word	0x00400bc7

00401374 <buttons_init>:
}

void buttons_init(void) {
  401374:	b5f0      	push	{r4, r5, r6, r7, lr}
  401376:	b083      	sub	sp, #12
	// Inicializa clock do perif�rico PIO responsavel pelos botoes
	pmc_enable_periph_clk(BUT1_PIO_ID);
  401378:	2010      	movs	r0, #16
  40137a:	4c37      	ldr	r4, [pc, #220]	; (401458 <buttons_init+0xe4>)
  40137c:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT2_PIO_ID);
  40137e:	200c      	movs	r0, #12
  401380:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT3_PIO_ID);
  401382:	200a      	movs	r0, #10
  401384:	47a0      	blx	r4
	
	// Configura PIO para lidar com o pino do bot�o como entrada com pull-up
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  401386:	4e35      	ldr	r6, [pc, #212]	; (40145c <buttons_init+0xe8>)
  401388:	2309      	movs	r3, #9
  40138a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40138e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401392:	4630      	mov	r0, r6
  401394:	4f32      	ldr	r7, [pc, #200]	; (401460 <buttons_init+0xec>)
  401396:	47b8      	blx	r7
	pio_configure(BUT2_PIO, PIO_INPUT, BUT2_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  401398:	4d32      	ldr	r5, [pc, #200]	; (401464 <buttons_init+0xf0>)
  40139a:	2309      	movs	r3, #9
  40139c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4013a0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4013a4:	4628      	mov	r0, r5
  4013a6:	47b8      	blx	r7
	pio_configure(BUT3_PIO, PIO_INPUT, BUT3_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4013a8:	4c2f      	ldr	r4, [pc, #188]	; (401468 <buttons_init+0xf4>)
  4013aa:	2309      	movs	r3, #9
  4013ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4013b0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4013b4:	4620      	mov	r0, r4
  4013b6:	47b8      	blx	r7
	
	pio_set_debounce_filter(BUT1_PIO, BUT1_IDX_MASK, 60);
  4013b8:	223c      	movs	r2, #60	; 0x3c
  4013ba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013be:	4630      	mov	r0, r6
  4013c0:	4f2a      	ldr	r7, [pc, #168]	; (40146c <buttons_init+0xf8>)
  4013c2:	47b8      	blx	r7
	pio_set_debounce_filter(BUT2_PIO, BUT2_IDX_MASK, 60);
  4013c4:	223c      	movs	r2, #60	; 0x3c
  4013c6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4013ca:	4628      	mov	r0, r5
  4013cc:	47b8      	blx	r7
	pio_set_debounce_filter(BUT3_PIO, BUT3_IDX_MASK, 60);
  4013ce:	223c      	movs	r2, #60	; 0x3c
  4013d0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4013d4:	4620      	mov	r0, r4
  4013d6:	47b8      	blx	r7
	
	// Configura interrup��o no pino referente ao botao e associa fun��o de callback caso uma interrup��o for gerada
	// a fun��o de callback � a: but1_callback()
	//PIO_IT_EDGE, //PIO_IT_RISE_EDGE, //PIO_IT_FALL_EDGE,);
	
	pio_handler_set(BUT1_PIO, BUT1_PIO_ID, BUT1_IDX_MASK, PIO_IT_RISE_EDGE, but1_callback);
  4013d8:	4b25      	ldr	r3, [pc, #148]	; (401470 <buttons_init+0xfc>)
  4013da:	9300      	str	r3, [sp, #0]
  4013dc:	2370      	movs	r3, #112	; 0x70
  4013de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4013e2:	2110      	movs	r1, #16
  4013e4:	4630      	mov	r0, r6
  4013e6:	4f23      	ldr	r7, [pc, #140]	; (401474 <buttons_init+0x100>)
  4013e8:	47b8      	blx	r7
	pio_handler_set(BUT2_PIO, BUT2_PIO_ID, BUT2_IDX_MASK, PIO_IT_FALL_EDGE, but2_callback);
  4013ea:	4b23      	ldr	r3, [pc, #140]	; (401478 <buttons_init+0x104>)
  4013ec:	9300      	str	r3, [sp, #0]
  4013ee:	2350      	movs	r3, #80	; 0x50
  4013f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4013f4:	210c      	movs	r1, #12
  4013f6:	4628      	mov	r0, r5
  4013f8:	47b8      	blx	r7
	pio_handler_set(BUT3_PIO, BUT3_PIO_ID, BUT3_IDX_MASK, PIO_IT_RISE_EDGE, but3_callback);
  4013fa:	4b20      	ldr	r3, [pc, #128]	; (40147c <buttons_init+0x108>)
  4013fc:	9300      	str	r3, [sp, #0]
  4013fe:	2370      	movs	r3, #112	; 0x70
  401400:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401404:	210a      	movs	r1, #10
  401406:	4620      	mov	r0, r4
  401408:	47b8      	blx	r7


	// Ativa interrup��o e limpa primeira IRQ gerada na ativacao
	pio_enable_interrupt(BUT1_PIO, BUT1_IDX_MASK);
  40140a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40140e:	4630      	mov	r0, r6
  401410:	4f1b      	ldr	r7, [pc, #108]	; (401480 <buttons_init+0x10c>)
  401412:	47b8      	blx	r7
	pio_enable_interrupt(BUT2_PIO, BUT2_IDX_MASK);
  401414:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401418:	4628      	mov	r0, r5
  40141a:	47b8      	blx	r7
	pio_enable_interrupt(BUT3_PIO, BUT3_IDX_MASK);
  40141c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401420:	4620      	mov	r0, r4
  401422:	47b8      	blx	r7
	
	pio_get_interrupt_status(BUT1_PIO);
  401424:	4630      	mov	r0, r6
  401426:	4e17      	ldr	r6, [pc, #92]	; (401484 <buttons_init+0x110>)
  401428:	47b0      	blx	r6
	pio_get_interrupt_status(BUT2_PIO);
  40142a:	4628      	mov	r0, r5
  40142c:	47b0      	blx	r6
	pio_get_interrupt_status(BUT3_PIO);
  40142e:	4620      	mov	r0, r4
  401430:	47b0      	blx	r6
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401432:	4b15      	ldr	r3, [pc, #84]	; (401488 <buttons_init+0x114>)
  401434:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401438:	601a      	str	r2, [r3, #0]
  40143a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40143e:	601a      	str	r2, [r3, #0]
  401440:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401444:	601a      	str	r2, [r3, #0]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401446:	2280      	movs	r2, #128	; 0x80
  401448:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  40144c:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  401450:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	NVIC_EnableIRQ(BUT3_PIO_ID);
	
	NVIC_SetPriority(BUT1_PIO_ID, 4); // Prioridade 4
	NVIC_SetPriority(BUT2_PIO_ID, 4); // Prioridade 4
	NVIC_SetPriority(BUT3_PIO_ID, 4); // Prioridade 4
}
  401454:	b003      	add	sp, #12
  401456:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401458:	00400fe1 	.word	0x00400fe1
  40145c:	400e1400 	.word	0x400e1400
  401460:	00400cc1 	.word	0x00400cc1
  401464:	400e1200 	.word	0x400e1200
  401468:	400e0e00 	.word	0x400e0e00
  40146c:	00400bad 	.word	0x00400bad
  401470:	00401299 	.word	0x00401299
  401474:	00400ded 	.word	0x00400ded
  401478:	004012ad 	.word	0x004012ad
  40147c:	004012c1 	.word	0x004012c1
  401480:	00400d8f 	.word	0x00400d8f
  401484:	00400d93 	.word	0x00400d93
  401488:	e000e100 	.word	0xe000e100

0040148c <RTT_Handler>:
	uint32_t irqRTTvalue = 25 ;   //0.25 * 20 = 5s de intervalo
	RTT_init(pllPreScale, irqRTTvalue);         
	flag_rtt_alarme = 0;
}

void RTT_Handler(void) {
  40148c:	b508      	push	{r3, lr}
	uint32_t ul_status;
	/* Get RTT status - ACK */
	ul_status = rtt_get_status(RTT);
  40148e:	4805      	ldr	r0, [pc, #20]	; (4014a4 <RTT_Handler+0x18>)
  401490:	4b05      	ldr	r3, [pc, #20]	; (4014a8 <RTT_Handler+0x1c>)
  401492:	4798      	blx	r3
	 if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
		//counter_rtt ++;        // flag RTT alarme
	 }
	 
	/* IRQ due to Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  401494:	f010 0f01 	tst.w	r0, #1
  401498:	d002      	beq.n	4014a0 <RTT_Handler+0x14>
		flag_rtt_alarme = 1;        // flag RTT alarme
  40149a:	2201      	movs	r2, #1
  40149c:	4b03      	ldr	r3, [pc, #12]	; (4014ac <RTT_Handler+0x20>)
  40149e:	701a      	strb	r2, [r3, #0]
  4014a0:	bd08      	pop	{r3, pc}
  4014a2:	bf00      	nop
  4014a4:	400e1830 	.word	0x400e1830
  4014a8:	00400229 	.word	0x00400229
  4014ac:	204006ec 	.word	0x204006ec

004014b0 <RTT_init>:
		//counter_rtt     = 0;
	}
}

void RTT_init(uint16_t pllPreScale, uint32_t IrqNPulses) {
  4014b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4014b2:	4605      	mov	r5, r0
  4014b4:	460f      	mov	r7, r1
	uint32_t ul_previous_time;
	/* Configure RTT for a 1 second tick interrupt */
	rtt_sel_source(RTT, false);
  4014b6:	4c14      	ldr	r4, [pc, #80]	; (401508 <RTT_init+0x58>)
  4014b8:	2100      	movs	r1, #0
  4014ba:	4620      	mov	r0, r4
  4014bc:	4b13      	ldr	r3, [pc, #76]	; (40150c <RTT_init+0x5c>)
  4014be:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  4014c0:	4629      	mov	r1, r5
  4014c2:	4620      	mov	r0, r4
  4014c4:	4b12      	ldr	r3, [pc, #72]	; (401510 <RTT_init+0x60>)
  4014c6:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
  4014c8:	4620      	mov	r0, r4
  4014ca:	4b12      	ldr	r3, [pc, #72]	; (401514 <RTT_init+0x64>)
  4014cc:	4798      	blx	r3
  4014ce:	4604      	mov	r4, r0
	while (ul_previous_time == rtt_read_timer_value(RTT));
  4014d0:	4e0d      	ldr	r6, [pc, #52]	; (401508 <RTT_init+0x58>)
  4014d2:	4d10      	ldr	r5, [pc, #64]	; (401514 <RTT_init+0x64>)
  4014d4:	4630      	mov	r0, r6
  4014d6:	47a8      	blx	r5
  4014d8:	4284      	cmp	r4, r0
  4014da:	d0fb      	beq.n	4014d4 <RTT_init+0x24>

	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  4014dc:	4d0a      	ldr	r5, [pc, #40]	; (401508 <RTT_init+0x58>)
  4014de:	19e1      	adds	r1, r4, r7
  4014e0:	4628      	mov	r0, r5
  4014e2:	4b0d      	ldr	r3, [pc, #52]	; (401518 <RTT_init+0x68>)
  4014e4:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4014e6:	4b0d      	ldr	r3, [pc, #52]	; (40151c <RTT_init+0x6c>)
  4014e8:	2208      	movs	r2, #8
  4014ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4014ee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4014f2:	2180      	movs	r1, #128	; 0x80
  4014f4:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4014f8:	601a      	str	r2, [r3, #0]
	/* Enable RTT interrupt */
	NVIC_DisableIRQ(RTT_IRQn);
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 4);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN | RTT_MR_RTTINCIEN);
  4014fa:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  4014fe:	4628      	mov	r0, r5
  401500:	4b07      	ldr	r3, [pc, #28]	; (401520 <RTT_init+0x70>)
  401502:	4798      	blx	r3
  401504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401506:	bf00      	nop
  401508:	400e1830 	.word	0x400e1830
  40150c:	004001c1 	.word	0x004001c1
  401510:	004001ad 	.word	0x004001ad
  401514:	00400215 	.word	0x00400215
  401518:	0040022d 	.word	0x0040022d
  40151c:	e000e100 	.word	0xe000e100
  401520:	004001ed 	.word	0x004001ed

00401524 <rtt_set_alarm>:
void rtt_set_alarm(void) {
  401524:	b508      	push	{r3, lr}
	RTT_init(pllPreScale, irqRTTvalue);         
  401526:	2119      	movs	r1, #25
  401528:	f641 1099 	movw	r0, #6553	; 0x1999
  40152c:	4b02      	ldr	r3, [pc, #8]	; (401538 <rtt_set_alarm+0x14>)
  40152e:	4798      	blx	r3
	flag_rtt_alarme = 0;
  401530:	2200      	movs	r2, #0
  401532:	4b02      	ldr	r3, [pc, #8]	; (40153c <rtt_set_alarm+0x18>)
  401534:	701a      	strb	r2, [r3, #0]
  401536:	bd08      	pop	{r3, pc}
  401538:	004014b1 	.word	0x004014b1
  40153c:	204006ec 	.word	0x204006ec

00401540 <TC_init>:
}

void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  401540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401544:	b085      	sub	sp, #20
  401546:	4606      	mov	r6, r0
  401548:	460c      	mov	r4, r1
  40154a:	4617      	mov	r7, r2
  40154c:	4698      	mov	r8, r3
	o uC possui 3 TCs, cada TC possui 3 canais
	TC0 : ID_TC0, ID_TC1, ID_TC2
	TC1 : ID_TC3, ID_TC4, ID_TC5
	TC2 : ID_TC6, ID_TC7, ID_TC8
	*/
	pmc_enable_periph_clk(ID_TC);
  40154e:	4608      	mov	r0, r1
  401550:	4b18      	ldr	r3, [pc, #96]	; (4015b4 <TC_init+0x74>)
  401552:	4798      	blx	r3

	/** Configura o TC para operar em  freq hz e interrup?c?o no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401554:	4d18      	ldr	r5, [pc, #96]	; (4015b8 <TC_init+0x78>)
  401556:	9500      	str	r5, [sp, #0]
  401558:	ab02      	add	r3, sp, #8
  40155a:	aa03      	add	r2, sp, #12
  40155c:	4629      	mov	r1, r5
  40155e:	4640      	mov	r0, r8
  401560:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4015d0 <TC_init+0x90>
  401564:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  401566:	9a02      	ldr	r2, [sp, #8]
  401568:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40156c:	4639      	mov	r1, r7
  40156e:	4630      	mov	r0, r6
  401570:	4b12      	ldr	r3, [pc, #72]	; (4015bc <TC_init+0x7c>)
  401572:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  401574:	9a03      	ldr	r2, [sp, #12]
  401576:	fbb5 f2f2 	udiv	r2, r5, r2
  40157a:	fbb2 f2f8 	udiv	r2, r2, r8
  40157e:	4639      	mov	r1, r7
  401580:	4630      	mov	r0, r6
  401582:	4b0f      	ldr	r3, [pc, #60]	; (4015c0 <TC_init+0x80>)
  401584:	4798      	blx	r3
  401586:	b263      	sxtb	r3, r4
  401588:	095b      	lsrs	r3, r3, #5
  40158a:	f004 041f 	and.w	r4, r4, #31
  40158e:	2201      	movs	r2, #1
  401590:	fa02 f404 	lsl.w	r4, r2, r4
  401594:	4a0b      	ldr	r2, [pc, #44]	; (4015c4 <TC_init+0x84>)
  401596:	f842 4023 	str.w	r4, [r2, r3, lsl #2]

	/* Configura e ativa interrup?c?o no TC canal 0 |  Interrup??o no C */
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  40159a:	2210      	movs	r2, #16
  40159c:	4639      	mov	r1, r7
  40159e:	4630      	mov	r0, r6
  4015a0:	4b09      	ldr	r3, [pc, #36]	; (4015c8 <TC_init+0x88>)
  4015a2:	4798      	blx	r3

	/* Inicializa o canal 0 do TC */
	tc_start(TC, TC_CHANNEL);
  4015a4:	4639      	mov	r1, r7
  4015a6:	4630      	mov	r0, r6
  4015a8:	4b08      	ldr	r3, [pc, #32]	; (4015cc <TC_init+0x8c>)
  4015aa:	4798      	blx	r3
}
  4015ac:	b005      	add	sp, #20
  4015ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4015b2:	bf00      	nop
  4015b4:	00400fe1 	.word	0x00400fe1
  4015b8:	11e1a300 	.word	0x11e1a300
  4015bc:	004003bb 	.word	0x004003bb
  4015c0:	004003dd 	.word	0x004003dd
  4015c4:	e000e100 	.word	0xe000e100
  4015c8:	004003e5 	.word	0x004003e5
  4015cc:	004003d5 	.word	0x004003d5
  4015d0:	004003f5 	.word	0x004003f5

004015d4 <TC1_Handler>:


void TC1_Handler(void){
  4015d4:	b500      	push	{lr}
  4015d6:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;
	/* Devemos indicar ao TC que a interrup??o foi satisfeita.*/
	ul_dummy = tc_get_status(TC0, 1);
  4015d8:	2101      	movs	r1, #1
  4015da:	4805      	ldr	r0, [pc, #20]	; (4015f0 <TC1_Handler+0x1c>)
  4015dc:	4b05      	ldr	r3, [pc, #20]	; (4015f4 <TC1_Handler+0x20>)
  4015de:	4798      	blx	r3
  4015e0:	9001      	str	r0, [sp, #4]
	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  4015e2:	9b01      	ldr	r3, [sp, #4]
	/** Muda o estado do LED */
	flag_tc1 = 1;
  4015e4:	2201      	movs	r2, #1
  4015e6:	4b04      	ldr	r3, [pc, #16]	; (4015f8 <TC1_Handler+0x24>)
  4015e8:	701a      	strb	r2, [r3, #0]
}
  4015ea:	b003      	add	sp, #12
  4015ec:	f85d fb04 	ldr.w	pc, [sp], #4
  4015f0:	4000c000 	.word	0x4000c000
  4015f4:	004003ed 	.word	0x004003ed
  4015f8:	204006ed 	.word	0x204006ed

004015fc <TC8_Handler>:

void TC8_Handler(void){
  4015fc:	b500      	push	{lr}
  4015fe:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;
	ul_dummy = tc_get_status(TC2, 2);
  401600:	2102      	movs	r1, #2
  401602:	4805      	ldr	r0, [pc, #20]	; (401618 <TC8_Handler+0x1c>)
  401604:	4b05      	ldr	r3, [pc, #20]	; (40161c <TC8_Handler+0x20>)
  401606:	4798      	blx	r3
  401608:	9001      	str	r0, [sp, #4]
	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  40160a:	9b01      	ldr	r3, [sp, #4]
	/** Muda o estado do LED */
	flag_tc2 = 1;
  40160c:	2201      	movs	r2, #1
  40160e:	4b04      	ldr	r3, [pc, #16]	; (401620 <TC8_Handler+0x24>)
  401610:	701a      	strb	r2, [r3, #0]
}
  401612:	b003      	add	sp, #12
  401614:	f85d fb04 	ldr.w	pc, [sp], #4
  401618:	40014000 	.word	0x40014000
  40161c:	004003ed 	.word	0x004003ed
  401620:	204006ee 	.word	0x204006ee

00401624 <TC3_Handler>:


void TC3_Handler(void){
  401624:	b500      	push	{lr}
  401626:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;
	/* Devemos indicar ao TC que a interrup??o foi satisfeita.*/
	ul_dummy = tc_get_status(TC1, 0);
  401628:	2100      	movs	r1, #0
  40162a:	4805      	ldr	r0, [pc, #20]	; (401640 <TC3_Handler+0x1c>)
  40162c:	4b05      	ldr	r3, [pc, #20]	; (401644 <TC3_Handler+0x20>)
  40162e:	4798      	blx	r3
  401630:	9001      	str	r0, [sp, #4]
	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  401632:	9b01      	ldr	r3, [sp, #4]
	/** Muda o estado do LED */
	flag_tc3 = 1;
  401634:	2201      	movs	r2, #1
  401636:	4b04      	ldr	r3, [pc, #16]	; (401648 <TC3_Handler+0x24>)
  401638:	701a      	strb	r2, [r3, #0]
}
  40163a:	b003      	add	sp, #12
  40163c:	f85d fb04 	ldr.w	pc, [sp], #4
  401640:	40010000 	.word	0x40010000
  401644:	004003ed 	.word	0x004003ed
  401648:	204006ef 	.word	0x204006ef

0040164c <io_init>:

void io_init(void) {
  40164c:	b510      	push	{r4, lr}
	
	leds_init();
  40164e:	4b0b      	ldr	r3, [pc, #44]	; (40167c <io_init+0x30>)
  401650:	4798      	blx	r3
	buttons_init();
  401652:	4b0b      	ldr	r3, [pc, #44]	; (401680 <io_init+0x34>)
  401654:	4798      	blx	r3
	
	// Init OLED
	gfx_mono_ssd1306_init();
  401656:	4b0b      	ldr	r3, [pc, #44]	; (401684 <io_init+0x38>)
  401658:	4798      	blx	r3
	//Config TC
	int freq_tc1 = 5;
	int freq_tc2 = 10;
	int freq_tc3 = 1;
		
	TC_init(TC0, ID_TC1, 1, freq_tc1);    // Configura timer TC0, canal 1  freq
  40165a:	2305      	movs	r3, #5
  40165c:	2201      	movs	r2, #1
  40165e:	2118      	movs	r1, #24
  401660:	4809      	ldr	r0, [pc, #36]	; (401688 <io_init+0x3c>)
  401662:	4c0a      	ldr	r4, [pc, #40]	; (40168c <io_init+0x40>)
  401664:	47a0      	blx	r4
	TC_init(TC2, ID_TC8, 2, freq_tc2);    // Configura timer TC2, canal 2 */
  401666:	230a      	movs	r3, #10
  401668:	2202      	movs	r2, #2
  40166a:	2131      	movs	r1, #49	; 0x31
  40166c:	4808      	ldr	r0, [pc, #32]	; (401690 <io_init+0x44>)
  40166e:	47a0      	blx	r4
	TC_init(TC1, ID_TC3, 0, freq_tc3);    // last argmument is frequency/
  401670:	2301      	movs	r3, #1
  401672:	2200      	movs	r2, #0
  401674:	211a      	movs	r1, #26
  401676:	4807      	ldr	r0, [pc, #28]	; (401694 <io_init+0x48>)
  401678:	47a0      	blx	r4
  40167a:	bd10      	pop	{r4, pc}
  40167c:	00401301 	.word	0x00401301
  401680:	00401375 	.word	0x00401375
  401684:	004006dd 	.word	0x004006dd
  401688:	4000c000 	.word	0x4000c000
  40168c:	00401541 	.word	0x00401541
  401690:	40014000 	.word	0x40014000
  401694:	40010000 	.word	0x40010000

00401698 <main>:
	
}

int main (void) {
  401698:	b580      	push	{r7, lr}
	board_init();
  40169a:	4b28      	ldr	r3, [pc, #160]	; (40173c <main+0xa4>)
  40169c:	4798      	blx	r3
	sysclk_init();
  40169e:	4b28      	ldr	r3, [pc, #160]	; (401740 <main+0xa8>)
  4016a0:	4798      	blx	r3
	delay_init();
	io_init();
  4016a2:	4b28      	ldr	r3, [pc, #160]	; (401744 <main+0xac>)
  4016a4:	4798      	blx	r3
	rtt_set_alarm();
  4016a6:	4b28      	ldr	r3, [pc, #160]	; (401748 <main+0xb0>)
  4016a8:	4798      	blx	r3
	
	gfx_mono_draw_string("Iniciando..",  0, 5, &sysfont); //horizontal, vertical
  4016aa:	4b28      	ldr	r3, [pc, #160]	; (40174c <main+0xb4>)
  4016ac:	2205      	movs	r2, #5
  4016ae:	2100      	movs	r1, #0
  4016b0:	4827      	ldr	r0, [pc, #156]	; (401750 <main+0xb8>)
  4016b2:	4c28      	ldr	r4, [pc, #160]	; (401754 <main+0xbc>)
  4016b4:	47a0      	blx	r4
	delay_s(1);
  4016b6:	4828      	ldr	r0, [pc, #160]	; (401758 <main+0xc0>)
  4016b8:	4b28      	ldr	r3, [pc, #160]	; (40175c <main+0xc4>)
  4016ba:	4798      	blx	r3

	while(1) {
		if (flag_tc1 & led1_on & flag_leds_ligados) {
  4016bc:	4c28      	ldr	r4, [pc, #160]	; (401760 <main+0xc8>)
			pin_toggle(LED1_PIO, LED1_IDX_MASK);
  4016be:	4f29      	ldr	r7, [pc, #164]	; (401764 <main+0xcc>)
		if (flag_tc1 & led1_on & flag_leds_ligados) {
  4016c0:	4d29      	ldr	r5, [pc, #164]	; (401768 <main+0xd0>)
			flag_tc1 = 0;
		}
			
		if (flag_tc2 & led2_on & flag_leds_ligados) {
			pin_toggle(LED2_PIO, LED2_IDX_MASK);
  4016c2:	4e2a      	ldr	r6, [pc, #168]	; (40176c <main+0xd4>)
  4016c4:	e012      	b.n	4016ec <main+0x54>
			pin_toggle(LED1_PIO, LED1_IDX_MASK);
  4016c6:	2101      	movs	r1, #1
  4016c8:	4638      	mov	r0, r7
  4016ca:	4b29      	ldr	r3, [pc, #164]	; (401770 <main+0xd8>)
  4016cc:	4798      	blx	r3
			flag_tc1 = 0;
  4016ce:	2300      	movs	r3, #0
  4016d0:	702b      	strb	r3, [r5, #0]
  4016d2:	e012      	b.n	4016fa <main+0x62>
			pin_toggle(LED2_PIO, LED2_IDX_MASK);
  4016d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4016d8:	4630      	mov	r0, r6
  4016da:	4b25      	ldr	r3, [pc, #148]	; (401770 <main+0xd8>)
  4016dc:	4798      	blx	r3
			flag_tc2 = 0;
  4016de:	2200      	movs	r2, #0
  4016e0:	4b24      	ldr	r3, [pc, #144]	; (401774 <main+0xdc>)
  4016e2:	701a      	strb	r2, [r3, #0]
  4016e4:	e011      	b.n	40170a <main+0x72>
		if (flag_tc3 & led3_on & flag_leds_ligados) {
			pin_toggle(LED3_PIO, LED3_IDX_MASK);
			flag_tc3 = 0;
		}
		
		if (flag_rtt_alarme) {
  4016e6:	4b24      	ldr	r3, [pc, #144]	; (401778 <main+0xe0>)
  4016e8:	781b      	ldrb	r3, [r3, #0]
  4016ea:	b9f3      	cbnz	r3, 40172a <main+0x92>
		if (flag_tc1 & led1_on & flag_leds_ligados) {
  4016ec:	7829      	ldrb	r1, [r5, #0]
  4016ee:	4b23      	ldr	r3, [pc, #140]	; (40177c <main+0xe4>)
  4016f0:	781b      	ldrb	r3, [r3, #0]
  4016f2:	7822      	ldrb	r2, [r4, #0]
  4016f4:	400b      	ands	r3, r1
  4016f6:	421a      	tst	r2, r3
  4016f8:	d1e5      	bne.n	4016c6 <main+0x2e>
		if (flag_tc2 & led2_on & flag_leds_ligados) {
  4016fa:	4b1e      	ldr	r3, [pc, #120]	; (401774 <main+0xdc>)
  4016fc:	7819      	ldrb	r1, [r3, #0]
  4016fe:	4b20      	ldr	r3, [pc, #128]	; (401780 <main+0xe8>)
  401700:	781b      	ldrb	r3, [r3, #0]
  401702:	7822      	ldrb	r2, [r4, #0]
  401704:	400b      	ands	r3, r1
  401706:	421a      	tst	r2, r3
  401708:	d1e4      	bne.n	4016d4 <main+0x3c>
		if (flag_tc3 & led3_on & flag_leds_ligados) {
  40170a:	4b1e      	ldr	r3, [pc, #120]	; (401784 <main+0xec>)
  40170c:	7819      	ldrb	r1, [r3, #0]
  40170e:	4b1e      	ldr	r3, [pc, #120]	; (401788 <main+0xf0>)
  401710:	781b      	ldrb	r3, [r3, #0]
  401712:	7822      	ldrb	r2, [r4, #0]
  401714:	400b      	ands	r3, r1
  401716:	421a      	tst	r2, r3
  401718:	d0e5      	beq.n	4016e6 <main+0x4e>
			pin_toggle(LED3_PIO, LED3_IDX_MASK);
  40171a:	2104      	movs	r1, #4
  40171c:	481b      	ldr	r0, [pc, #108]	; (40178c <main+0xf4>)
  40171e:	4b14      	ldr	r3, [pc, #80]	; (401770 <main+0xd8>)
  401720:	4798      	blx	r3
			flag_tc3 = 0;
  401722:	2200      	movs	r2, #0
  401724:	4b17      	ldr	r3, [pc, #92]	; (401784 <main+0xec>)
  401726:	701a      	strb	r2, [r3, #0]
  401728:	e7dd      	b.n	4016e6 <main+0x4e>
			flag_leds_ligados = !flag_leds_ligados;
  40172a:	7823      	ldrb	r3, [r4, #0]
  40172c:	fab3 f383 	clz	r3, r3
  401730:	095b      	lsrs	r3, r3, #5
  401732:	7023      	strb	r3, [r4, #0]
			rtt_set_alarm();
  401734:	4b04      	ldr	r3, [pc, #16]	; (401748 <main+0xb0>)
  401736:	4798      	blx	r3
  401738:	e7d8      	b.n	4016ec <main+0x54>
  40173a:	bf00      	nop
  40173c:	00400a6d 	.word	0x00400a6d
  401740:	004009fd 	.word	0x004009fd
  401744:	0040164d 	.word	0x0040164d
  401748:	00401525 	.word	0x00401525
  40174c:	2040000c 	.word	0x2040000c
  401750:	00402348 	.word	0x00402348
  401754:	00400645 	.word	0x00400645
  401758:	0303af6b 	.word	0x0303af6b
  40175c:	20400001 	.word	0x20400001
  401760:	20400020 	.word	0x20400020
  401764:	400e0e00 	.word	0x400e0e00
  401768:	204006ed 	.word	0x204006ed
  40176c:	400e1200 	.word	0x400e1200
  401770:	004012d5 	.word	0x004012d5
  401774:	204006ee 	.word	0x204006ee
  401778:	204006ec 	.word	0x204006ec
  40177c:	20400021 	.word	0x20400021
  401780:	204006f0 	.word	0x204006f0
  401784:	204006ef 	.word	0x204006ef
  401788:	20400022 	.word	0x20400022
  40178c:	400e1000 	.word	0x400e1000

00401790 <__libc_init_array>:
  401790:	b570      	push	{r4, r5, r6, lr}
  401792:	4e0f      	ldr	r6, [pc, #60]	; (4017d0 <__libc_init_array+0x40>)
  401794:	4d0f      	ldr	r5, [pc, #60]	; (4017d4 <__libc_init_array+0x44>)
  401796:	1b76      	subs	r6, r6, r5
  401798:	10b6      	asrs	r6, r6, #2
  40179a:	bf18      	it	ne
  40179c:	2400      	movne	r4, #0
  40179e:	d005      	beq.n	4017ac <__libc_init_array+0x1c>
  4017a0:	3401      	adds	r4, #1
  4017a2:	f855 3b04 	ldr.w	r3, [r5], #4
  4017a6:	4798      	blx	r3
  4017a8:	42a6      	cmp	r6, r4
  4017aa:	d1f9      	bne.n	4017a0 <__libc_init_array+0x10>
  4017ac:	4e0a      	ldr	r6, [pc, #40]	; (4017d8 <__libc_init_array+0x48>)
  4017ae:	4d0b      	ldr	r5, [pc, #44]	; (4017dc <__libc_init_array+0x4c>)
  4017b0:	1b76      	subs	r6, r6, r5
  4017b2:	f000 fdd1 	bl	402358 <_init>
  4017b6:	10b6      	asrs	r6, r6, #2
  4017b8:	bf18      	it	ne
  4017ba:	2400      	movne	r4, #0
  4017bc:	d006      	beq.n	4017cc <__libc_init_array+0x3c>
  4017be:	3401      	adds	r4, #1
  4017c0:	f855 3b04 	ldr.w	r3, [r5], #4
  4017c4:	4798      	blx	r3
  4017c6:	42a6      	cmp	r6, r4
  4017c8:	d1f9      	bne.n	4017be <__libc_init_array+0x2e>
  4017ca:	bd70      	pop	{r4, r5, r6, pc}
  4017cc:	bd70      	pop	{r4, r5, r6, pc}
  4017ce:	bf00      	nop
  4017d0:	00402364 	.word	0x00402364
  4017d4:	00402364 	.word	0x00402364
  4017d8:	0040236c 	.word	0x0040236c
  4017dc:	00402364 	.word	0x00402364

004017e0 <register_fini>:
  4017e0:	4b02      	ldr	r3, [pc, #8]	; (4017ec <register_fini+0xc>)
  4017e2:	b113      	cbz	r3, 4017ea <register_fini+0xa>
  4017e4:	4802      	ldr	r0, [pc, #8]	; (4017f0 <register_fini+0x10>)
  4017e6:	f000 b805 	b.w	4017f4 <atexit>
  4017ea:	4770      	bx	lr
  4017ec:	00000000 	.word	0x00000000
  4017f0:	00401801 	.word	0x00401801

004017f4 <atexit>:
  4017f4:	2300      	movs	r3, #0
  4017f6:	4601      	mov	r1, r0
  4017f8:	461a      	mov	r2, r3
  4017fa:	4618      	mov	r0, r3
  4017fc:	f000 b81e 	b.w	40183c <__register_exitproc>

00401800 <__libc_fini_array>:
  401800:	b538      	push	{r3, r4, r5, lr}
  401802:	4c0a      	ldr	r4, [pc, #40]	; (40182c <__libc_fini_array+0x2c>)
  401804:	4d0a      	ldr	r5, [pc, #40]	; (401830 <__libc_fini_array+0x30>)
  401806:	1b64      	subs	r4, r4, r5
  401808:	10a4      	asrs	r4, r4, #2
  40180a:	d00a      	beq.n	401822 <__libc_fini_array+0x22>
  40180c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401810:	3b01      	subs	r3, #1
  401812:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401816:	3c01      	subs	r4, #1
  401818:	f855 3904 	ldr.w	r3, [r5], #-4
  40181c:	4798      	blx	r3
  40181e:	2c00      	cmp	r4, #0
  401820:	d1f9      	bne.n	401816 <__libc_fini_array+0x16>
  401822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401826:	f000 bda1 	b.w	40236c <_fini>
  40182a:	bf00      	nop
  40182c:	0040237c 	.word	0x0040237c
  401830:	00402378 	.word	0x00402378

00401834 <__retarget_lock_acquire_recursive>:
  401834:	4770      	bx	lr
  401836:	bf00      	nop

00401838 <__retarget_lock_release_recursive>:
  401838:	4770      	bx	lr
  40183a:	bf00      	nop

0040183c <__register_exitproc>:
  40183c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401840:	4d2c      	ldr	r5, [pc, #176]	; (4018f4 <__register_exitproc+0xb8>)
  401842:	4606      	mov	r6, r0
  401844:	6828      	ldr	r0, [r5, #0]
  401846:	4698      	mov	r8, r3
  401848:	460f      	mov	r7, r1
  40184a:	4691      	mov	r9, r2
  40184c:	f7ff fff2 	bl	401834 <__retarget_lock_acquire_recursive>
  401850:	4b29      	ldr	r3, [pc, #164]	; (4018f8 <__register_exitproc+0xbc>)
  401852:	681c      	ldr	r4, [r3, #0]
  401854:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401858:	2b00      	cmp	r3, #0
  40185a:	d03e      	beq.n	4018da <__register_exitproc+0x9e>
  40185c:	685a      	ldr	r2, [r3, #4]
  40185e:	2a1f      	cmp	r2, #31
  401860:	dc1c      	bgt.n	40189c <__register_exitproc+0x60>
  401862:	f102 0e01 	add.w	lr, r2, #1
  401866:	b176      	cbz	r6, 401886 <__register_exitproc+0x4a>
  401868:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40186c:	2401      	movs	r4, #1
  40186e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401872:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401876:	4094      	lsls	r4, r2
  401878:	4320      	orrs	r0, r4
  40187a:	2e02      	cmp	r6, #2
  40187c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401880:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401884:	d023      	beq.n	4018ce <__register_exitproc+0x92>
  401886:	3202      	adds	r2, #2
  401888:	f8c3 e004 	str.w	lr, [r3, #4]
  40188c:	6828      	ldr	r0, [r5, #0]
  40188e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401892:	f7ff ffd1 	bl	401838 <__retarget_lock_release_recursive>
  401896:	2000      	movs	r0, #0
  401898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40189c:	4b17      	ldr	r3, [pc, #92]	; (4018fc <__register_exitproc+0xc0>)
  40189e:	b30b      	cbz	r3, 4018e4 <__register_exitproc+0xa8>
  4018a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4018a4:	f3af 8000 	nop.w
  4018a8:	4603      	mov	r3, r0
  4018aa:	b1d8      	cbz	r0, 4018e4 <__register_exitproc+0xa8>
  4018ac:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4018b0:	6002      	str	r2, [r0, #0]
  4018b2:	2100      	movs	r1, #0
  4018b4:	6041      	str	r1, [r0, #4]
  4018b6:	460a      	mov	r2, r1
  4018b8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4018bc:	f04f 0e01 	mov.w	lr, #1
  4018c0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4018c4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4018c8:	2e00      	cmp	r6, #0
  4018ca:	d0dc      	beq.n	401886 <__register_exitproc+0x4a>
  4018cc:	e7cc      	b.n	401868 <__register_exitproc+0x2c>
  4018ce:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4018d2:	430c      	orrs	r4, r1
  4018d4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4018d8:	e7d5      	b.n	401886 <__register_exitproc+0x4a>
  4018da:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4018de:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4018e2:	e7bb      	b.n	40185c <__register_exitproc+0x20>
  4018e4:	6828      	ldr	r0, [r5, #0]
  4018e6:	f7ff ffa7 	bl	401838 <__retarget_lock_release_recursive>
  4018ea:	f04f 30ff 	mov.w	r0, #4294967295
  4018ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4018f2:	bf00      	nop
  4018f4:	20400450 	.word	0x20400450
  4018f8:	00402354 	.word	0x00402354
  4018fc:	00000000 	.word	0x00000000

00401900 <sysfont_glyphs>:
	...
  401920:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  401930:	00000030 00000000 00000000 006c006c     0...........l.l.
  401940:	006c006c 00000000 00000000 00000000     l.l.............
	...
  401958:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  401968:	00000028 00000000 00000000 003c0010     (.............<.
  401978:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  401990:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  4019a0:	00000088 00000000 00000000 00900060     ............`...
  4019b0:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  4019c8:	00100010 00000010 00000000 00000000     ................
	...
  4019e4:	00100008 00200020 00200020 00200020     .... . . . . . .
  4019f4:	00080010 00000000 00000000 00100020     ............ ...
  401a04:	00080008 00080008 00080008 00200010     .............. .
  401a14:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  401a3c:	00100010 00fe0010 00100010 00000010     ................
	...
  401a64:	00300010 00000020 00000000 00000000     ..0. ...........
  401a74:	00000000 007c0000 00000000 00000000     ......|.........
	...
  401a98:	00300000 00000030 00000000 00000000     ..0.0...........
  401aa8:	00080000 00100008 00200010 00400020     .......... . .@.
  401ab8:	00000040 00000000 00000000 00780000     @.............x.
  401ac8:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  401ae0:	00100000 00500030 00100010 00100010     ....0.P.........
  401af0:	0000007c 00000000 00000000 00700000     |.............p.
  401b00:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  401b18:	00700000 00080088 00080030 00880008     ..p.....0.......
  401b28:	00000070 00000000 00000000 00080000     p...............
  401b38:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  401b50:	00780000 00800080 000800f0 00080008     ..x.............
  401b60:	000000f0 00000000 00000000 00300000     ..............0.
  401b70:	00800040 008800f0 00880088 00000070     @...........p...
	...
  401b88:	00f80000 00100008 00200010 00400020     .......... . .@.
  401b98:	00000040 00000000 00000000 00700000     @.............p.
  401ba8:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  401bc0:	00700000 00880088 00780088 00100008     ..p.......x.....
  401bd0:	00000060 00000000 00000000 00000000     `...............
  401be0:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  401bfc:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  401c0c:	00000040 00000000 00000000 00100008     @...............
  401c1c:	00400020 00100020 00000008 00000000      .@. ...........
	...
  401c38:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  401c50:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  401c68:	00300000 00080048 00200010 00000000     ..0.H..... .....
  401c78:	00000020 00000000 00000000 00000000      ...............
  401c88:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  401ca0:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  401cb0:	00000044 00000000 00000000 00f80000     D...............
  401cc0:	00840084 008400f8 00840084 000000f8     ................
	...
  401cd8:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  401ce8:	0000003c 00000000 00000000 00f00000     <...............
  401cf8:	00840088 00840084 00880084 000000f0     ................
	...
  401d10:	00f80000 00800080 008000f0 00800080     ................
  401d20:	000000f8 00000000 00000000 00f80000     ................
  401d30:	00800080 008000f8 00800080 00000080     ................
	...
  401d48:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  401d58:	00000038 00000000 00000000 00880000     8...............
  401d68:	00880088 008800f8 00880088 00000088     ................
	...
  401d80:	00f80000 00200020 00200020 00200020     .... . . . . . .
  401d90:	000000f8 00000000 00000000 00f80000     ................
  401da0:	00080008 00080008 00080008 000000f0     ................
	...
  401db8:	00840000 00900088 00d000a0 00840088     ................
  401dc8:	00000084 00000000 00000000 00800000     ................
  401dd8:	00800080 00800080 00800080 000000fc     ................
	...
  401df0:	00840000 00cc00cc 00b400b4 00840084     ................
  401e00:	00000084 00000000 00000000 00840000     ................
  401e10:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  401e28:	00780000 00840084 00840084 00840084     ..x.............
  401e38:	00000078 00000000 00000000 00f80000     x...............
  401e48:	00840084 00f80084 00800080 00000080     ................
	...
  401e60:	00780000 00840084 00840084 00840084     ..x.............
  401e70:	00200078 00000018 00000000 00f80000     x. .............
  401e80:	00840084 00f80084 00840088 00000084     ................
	...
  401e98:	007c0000 00800080 00180060 00040004     ..|.....`.......
  401ea8:	000000f8 00000000 00000000 00f80000     ................
  401eb8:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  401ed0:	00840000 00840084 00840084 00840084     ................
  401ee0:	00000078 00000000 00000000 00840000     x...............
  401ef0:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  401f08:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  401f18:	00000050 00000000 00000000 00880000     P...............
  401f28:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  401f40:	00880000 00880088 00500050 00200020     ........P.P. . .
  401f50:	00000020 00000000 00000000 00fc0000      ...............
  401f60:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  401f78:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  401f88:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  401f98:	00200020 00100020 00100010 00080008      . . ...........
	...
  401fb0:	00080038 00080008 00080008 00080008     8...............
  401fc0:	00080008 00000038 00000000 00280010     ....8.........(.
  401fd0:	00000044 00000000 00000000 00000000     D...............
	...
  401ff8:	00000038 00000000 00000000 00200000     8............. .
  402008:	00000010 00000000 00000000 00000000     ................
	...
  402024:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  40203c:	00800080 00f80080 00840084 00840084     ................
  40204c:	000000f8 00000000 00000000 00000000     ................
  40205c:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  402074:	00040004 007c0004 00840084 008c0084     ......|.........
  402084:	00000074 00000000 00000000 00000000     t...............
  402094:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  4020ac:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  4020bc:	000000fc 00000000 00000000 00000000     ................
  4020cc:	007c0000 00840084 00840084 0004007c     ..|.........|...
  4020dc:	00000078 00000000 00800080 00b80080     x...............
  4020ec:	008400c4 00840084 00000084 00000000     ................
  4020fc:	00000000 00100000 00700000 00100010     ..........p.....
  40210c:	00100010 0000007c 00000000 00000000     ....|...........
  40211c:	00080000 00780000 00080008 00080008     ......x.........
  40212c:	00080008 00700008 00000000 00800080     ......p.........
  40213c:	00880080 00a00090 008800d0 00000088     ................
	...
  402154:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  402164:	000000f8 00000000 00000000 00000000     ................
  402174:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  402190:	00b80000 008400c4 00840084 00000084     ................
	...
  4021ac:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  4021c8:	00b80000 008400c4 00840084 008000f8     ................
  4021d8:	00000080 00000000 00000000 007c0000     ..............|.
  4021e8:	00840084 00840084 0004007c 00000004     ........|.......
	...
  402200:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  40221c:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  402238:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  402254:	00880000 00880088 00880088 0000007c     ............|...
	...
  402270:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  40228c:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  4022a8:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  4022c4:	00840000 00480084 00300048 00200010     ......H.H.0... .
  4022d4:	00000040 00000000 00000000 00f80000     @...............
  4022e4:	00100008 00400020 000000f8 00000000     .... .@.........
  4022f4:	00000000 00200010 00100020 00200020     ...... . ... . .
  402304:	00200010 00100020 00000000 00000000     .. . ...........
  402314:	00100010 00100010 00000000 00100010     ................
  402324:	00100010 00000000 00000000 00100020     ............ ...
  402334:	00200010 00100010 00100020 00200010     .. ..... ..... .
  402344:	00000000 63696e49 646e6169 002e2e6f     ....Iniciando...

00402354 <_global_impure_ptr>:
  402354:	20400028                                (.@ 

00402358 <_init>:
  402358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40235a:	bf00      	nop
  40235c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40235e:	bc08      	pop	{r3}
  402360:	469e      	mov	lr, r3
  402362:	4770      	bx	lr

00402364 <__init_array_start>:
  402364:	004017e1 	.word	0x004017e1

00402368 <__frame_dummy_init_array_entry>:
  402368:	00400165                                e.@.

0040236c <_fini>:
  40236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40236e:	bf00      	nop
  402370:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402372:	bc08      	pop	{r3}
  402374:	469e      	mov	lr, r3
  402376:	4770      	bx	lr

00402378 <__fini_array_start>:
  402378:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 1900 0040 0e0a 7d20               ......@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <flag_leds_ligados>:
20400020:	0101                                             .

20400021 <led1_on>:
20400021:	0101                                             .

20400022 <led3_on>:
20400022:	0001 0000 0000                              ......

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	06f4 2040                                   ..@ 
